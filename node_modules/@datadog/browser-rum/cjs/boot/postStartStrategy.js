"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPostStartStrategy = createPostStartStrategy;
const browser_core_1 = require("@datadog/browser-core");
const getSessionReplayLink_1 = require("../domain/getSessionReplayLink");
function createPostStartStrategy(configuration, lifeCycle, sessionManager, viewHistory, loadRecorder, getOrCreateDeflateEncoder, telemetry) {
    let status = 0 /* RecorderStatus.Stopped */;
    let stopRecording;
    lifeCycle.subscribe(9 /* LifeCycleEventType.SESSION_EXPIRED */, () => {
        if (status === 2 /* RecorderStatus.Starting */ || status === 3 /* RecorderStatus.Started */) {
            stop();
            status = 1 /* RecorderStatus.IntentToStart */;
        }
    });
    lifeCycle.subscribe(10 /* LifeCycleEventType.SESSION_RENEWED */, () => {
        if (status === 1 /* RecorderStatus.IntentToStart */) {
            start();
        }
    });
    const doStart = async () => {
        const [startRecordingImpl] = await Promise.all([loadRecorder(), (0, browser_core_1.asyncRunOnReadyState)(configuration, 'interactive')]);
        if (status !== 2 /* RecorderStatus.Starting */) {
            return;
        }
        const deflateEncoder = getOrCreateDeflateEncoder();
        if (!deflateEncoder || !startRecordingImpl) {
            status = 0 /* RecorderStatus.Stopped */;
            return;
        }
        ;
        ({ stop: stopRecording } = startRecordingImpl(lifeCycle, configuration, sessionManager, viewHistory, deflateEncoder, telemetry));
        status = 3 /* RecorderStatus.Started */;
    };
    function start(options) {
        const session = sessionManager.findTrackedSession();
        if (canStartRecording(session, options)) {
            status = 1 /* RecorderStatus.IntentToStart */;
            return;
        }
        if (isRecordingInProgress(status)) {
            return;
        }
        status = 2 /* RecorderStatus.Starting */;
        // Intentionally not awaiting doStart() to keep it asynchronous
        doStart().catch(browser_core_1.monitorError);
        if (shouldForceReplay(session, options)) {
            sessionManager.setForcedReplay();
        }
    }
    function stop() {
        if (status === 3 /* RecorderStatus.Started */) {
            stopRecording === null || stopRecording === void 0 ? void 0 : stopRecording();
        }
        status = 0 /* RecorderStatus.Stopped */;
    }
    return {
        start,
        stop,
        getSessionReplayLink() {
            return (0, getSessionReplayLink_1.getSessionReplayLink)(configuration, sessionManager, viewHistory, status !== 0 /* RecorderStatus.Stopped */);
        },
        isRecording: () => status === 3 /* RecorderStatus.Started */,
    };
}
function canStartRecording(session, options) {
    return !session || (session.sessionReplay === 0 /* SessionReplayState.OFF */ && (!options || !options.force));
}
function isRecordingInProgress(status) {
    return status === 2 /* RecorderStatus.Starting */ || status === 3 /* RecorderStatus.Started */;
}
function shouldForceReplay(session, options) {
    return options && options.force && session.sessionReplay === 0 /* SessionReplayState.OFF */;
}
//# sourceMappingURL=postStartStrategy.js.map