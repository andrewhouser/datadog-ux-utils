"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.record = record;
const browser_core_1 = require("@datadog/browser-core");
const replayStats = __importStar(require("../replayStats"));
const trackers_1 = require("./trackers");
const elementsScrollPositions_1 = require("./elementsScrollPositions");
const shadowRootsController_1 = require("./shadowRootsController");
const startFullSnapshots_1 = require("./startFullSnapshots");
const recordIds_1 = require("./recordIds");
function record(options) {
    const { emit, configuration, lifeCycle } = options;
    // runtime checks for user options
    if (!emit) {
        throw new Error('emit function is required');
    }
    const emitAndComputeStats = (record, stats) => {
        emit(record, stats);
        (0, browser_core_1.sendToExtension)('record', { record });
        const view = options.viewHistory.findView();
        replayStats.addRecord(view.id);
    };
    const elementsScrollPositions = (0, elementsScrollPositions_1.createElementsScrollPositions)();
    const shadowRootsController = (0, shadowRootsController_1.initShadowRootsController)(configuration, emitAndComputeStats, elementsScrollPositions);
    const { stop: stopFullSnapshots } = (0, startFullSnapshots_1.startFullSnapshots)(elementsScrollPositions, shadowRootsController, lifeCycle, configuration, flushMutations, emitAndComputeStats);
    function flushMutations() {
        shadowRootsController.flush();
        mutationTracker.flush();
    }
    const recordIds = (0, recordIds_1.initRecordIds)();
    const mutationTracker = (0, trackers_1.trackMutation)(emitAndComputeStats, configuration, shadowRootsController, document);
    const trackers = [
        mutationTracker,
        (0, trackers_1.trackMove)(configuration, emitAndComputeStats),
        (0, trackers_1.trackMouseInteraction)(configuration, emitAndComputeStats, recordIds),
        (0, trackers_1.trackScroll)(configuration, emitAndComputeStats, elementsScrollPositions, document),
        (0, trackers_1.trackViewportResize)(configuration, emitAndComputeStats),
        (0, trackers_1.trackInput)(configuration, emitAndComputeStats),
        (0, trackers_1.trackMediaInteraction)(configuration, emitAndComputeStats),
        (0, trackers_1.trackStyleSheet)(emitAndComputeStats),
        (0, trackers_1.trackFocus)(configuration, emitAndComputeStats),
        (0, trackers_1.trackVisualViewportResize)(configuration, emitAndComputeStats),
        (0, trackers_1.trackFrustration)(lifeCycle, emitAndComputeStats, recordIds),
        (0, trackers_1.trackViewEnd)(lifeCycle, (viewEndRecord) => {
            flushMutations();
            emitAndComputeStats(viewEndRecord);
        }),
    ];
    return {
        stop: () => {
            shadowRootsController.stop();
            trackers.forEach((tracker) => tracker.stop());
            stopFullSnapshots();
        },
        flushMutations,
        shadowRootsController,
    };
}
//# sourceMappingURL=record.js.map