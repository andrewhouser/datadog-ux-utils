"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startFullSnapshots = startFullSnapshots;
const browser_rum_core_1 = require("@datadog/browser-rum-core");
const browser_core_1 = require("@datadog/browser-core");
const types_1 = require("../../types");
const serialization_1 = require("./serialization");
const viewports_1 = require("./viewports");
function startFullSnapshots(elementsScrollPositions, shadowRootsController, lifeCycle, configuration, flushMutations, emit) {
    const takeFullSnapshot = (timestamp, status) => {
        const { width, height } = (0, browser_rum_core_1.getViewportDimension)();
        emit({
            data: {
                height,
                href: window.location.href,
                width,
            },
            type: types_1.RecordType.Meta,
            timestamp,
        });
        emit({
            data: {
                has_focus: document.hasFocus(),
            },
            type: types_1.RecordType.Focus,
            timestamp,
        });
        const serializationStats = (0, serialization_1.createSerializationStats)();
        const serializationContext = {
            status,
            elementsScrollPositions,
            serializationStats,
            shadowRootsController,
        };
        emit({
            data: {
                node: (0, serialization_1.serializeDocument)(document, configuration, serializationContext),
                initialOffset: {
                    left: (0, browser_rum_core_1.getScrollX)(),
                    top: (0, browser_rum_core_1.getScrollY)(),
                },
            },
            type: types_1.RecordType.FullSnapshot,
            timestamp,
        }, serializationStats);
        if (window.visualViewport) {
            emit({
                data: (0, viewports_1.getVisualViewport)(window.visualViewport),
                type: types_1.RecordType.VisualViewport,
                timestamp,
            });
        }
    };
    takeFullSnapshot((0, browser_core_1.timeStampNow)(), 0 /* SerializationContextStatus.INITIAL_FULL_SNAPSHOT */);
    const { unsubscribe } = lifeCycle.subscribe(2 /* LifeCycleEventType.VIEW_CREATED */, (view) => {
        flushMutations();
        takeFullSnapshot(view.startClocks.timeStamp, 1 /* SerializationContextStatus.SUBSEQUENT_FULL_SNAPSHOT */);
    });
    return {
        stop: unsubscribe,
    };
}
//# sourceMappingURL=startFullSnapshots.js.map