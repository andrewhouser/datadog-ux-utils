"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAttributes = serializeAttributes;
exports.getCssRulesString = getCssRulesString;
const browser_rum_core_1 = require("@datadog/browser-rum-core");
const browser_core_1 = require("@datadog/browser-core");
const serializationUtils_1 = require("./serializationUtils");
const serializeAttribute_1 = require("./serializeAttribute");
const serializationStats_1 = require("./serializationStats");
function serializeAttributes(element, nodePrivacyLevel, options) {
    if (nodePrivacyLevel === browser_rum_core_1.NodePrivacyLevel.HIDDEN) {
        return {};
    }
    const safeAttrs = {};
    const tagName = (0, serializationUtils_1.getValidTagName)(element.tagName);
    const doc = element.ownerDocument;
    for (let i = 0; i < element.attributes.length; i += 1) {
        const attribute = element.attributes.item(i);
        const attributeName = attribute.name;
        const attributeValue = (0, serializeAttribute_1.serializeAttribute)(element, nodePrivacyLevel, attributeName, options.configuration);
        if (attributeValue !== null) {
            safeAttrs[attributeName] = attributeValue;
        }
    }
    if (element.value &&
        (tagName === 'textarea' || tagName === 'select' || tagName === 'option' || tagName === 'input')) {
        const formValue = (0, serializationUtils_1.getElementInputValue)(element, nodePrivacyLevel);
        if (formValue !== undefined) {
            safeAttrs.value = formValue;
        }
    }
    /**
     * <Option> can be selected, which occurs if its `value` matches ancestor `<Select>.value`
     */
    if (tagName === 'option' && nodePrivacyLevel === browser_rum_core_1.NodePrivacyLevel.ALLOW) {
        // For privacy=`MASK`, all the values would be the same, so skip.
        const optionElement = element;
        if (optionElement.selected) {
            safeAttrs.selected = optionElement.selected;
        }
    }
    // remote css
    if (tagName === 'link') {
        const stylesheet = Array.from(doc.styleSheets).find((s) => s.href === element.href);
        const cssText = getCssRulesString(stylesheet);
        if (cssText && stylesheet) {
            (0, serializationStats_1.updateCssTextSerializationStats)(options.serializationContext.serializationStats, cssText.length);
            safeAttrs._cssText = cssText;
        }
    }
    // dynamic stylesheet
    if (tagName === 'style' && element.sheet) {
        const cssText = getCssRulesString(element.sheet);
        if (cssText) {
            (0, serializationStats_1.updateCssTextSerializationStats)(options.serializationContext.serializationStats, cssText.length);
            safeAttrs._cssText = cssText;
        }
    }
    /**
     * Forms: input[type=checkbox,radio]
     * The `checked` property for <input> is a little bit special:
     * 1. el.checked is a setter that returns if truthy.
     * 2. getAttribute returns the string value
     * getAttribute('checked') does not sync with `Element.checked`, so use JS property
     * NOTE: `checked` property exists on `HTMLInputElement`. For serializer assumptions, we check for type=radio|check.
     */
    const inputElement = element;
    if (tagName === 'input' && (inputElement.type === 'radio' || inputElement.type === 'checkbox')) {
        if (nodePrivacyLevel === browser_rum_core_1.NodePrivacyLevel.ALLOW) {
            safeAttrs.checked = !!inputElement.checked;
        }
        else if ((0, browser_rum_core_1.shouldMaskNode)(inputElement, nodePrivacyLevel)) {
            delete safeAttrs.checked;
        }
    }
    /**
     * Serialize the media playback state
     */
    if (tagName === 'audio' || tagName === 'video') {
        const mediaElement = element;
        safeAttrs.rr_mediaState = mediaElement.paused ? 'paused' : 'played';
    }
    /**
     * Serialize the scroll state for each element only for full snapshot
     */
    let scrollTop;
    let scrollLeft;
    const serializationContext = options.serializationContext;
    switch (serializationContext.status) {
        case 0 /* SerializationContextStatus.INITIAL_FULL_SNAPSHOT */:
            scrollTop = Math.round(element.scrollTop);
            scrollLeft = Math.round(element.scrollLeft);
            if (scrollTop || scrollLeft) {
                serializationContext.elementsScrollPositions.set(element, { scrollTop, scrollLeft });
            }
            break;
        case 1 /* SerializationContextStatus.SUBSEQUENT_FULL_SNAPSHOT */:
            if (serializationContext.elementsScrollPositions.has(element)) {
                ;
                ({ scrollTop, scrollLeft } = serializationContext.elementsScrollPositions.get(element));
            }
            break;
    }
    if (scrollLeft) {
        safeAttrs.rr_scrollLeft = scrollLeft;
    }
    if (scrollTop) {
        safeAttrs.rr_scrollTop = scrollTop;
    }
    return safeAttrs;
}
function getCssRulesString(cssStyleSheet) {
    if (!cssStyleSheet) {
        return null;
    }
    let rules;
    try {
        rules = cssStyleSheet.rules || cssStyleSheet.cssRules;
    }
    catch (_a) {
        // if css is protected by CORS we cannot access cssRules see: https://www.w3.org/TR/cssom-1/#the-cssstylesheet-interface
    }
    if (!rules) {
        return null;
    }
    const styleSheetCssText = Array.from(rules, (0, browser_core_1.isSafari)() ? getCssRuleStringForSafari : getCssRuleString).join('');
    return (0, serializationUtils_1.switchToAbsoluteUrl)(styleSheetCssText, cssStyleSheet.href);
}
function getCssRuleStringForSafari(rule) {
    // Safari does not escape attribute selectors containing : properly
    // https://bugs.webkit.org/show_bug.cgi?id=184604
    if (isCSSStyleRule(rule) && rule.selectorText.includes(':')) {
        // This regex replaces [foo:bar] by [foo\\:bar]
        const escapeColon = /(\[[\w-]+[^\\])(:[^\]]+\])/g;
        return rule.cssText.replace(escapeColon, '$1\\$2');
    }
    return getCssRuleString(rule);
}
function getCssRuleString(rule) {
    // If it's an @import rule, try to inline sub-rules recursively with `getCssRulesString`. This
    // operation can fail if the imported stylesheet is protected by CORS, in which case we fallback
    // to the @import rule CSS text.
    return (isCSSImportRule(rule) && getCssRulesString(rule.styleSheet)) || rule.cssText;
}
function isCSSImportRule(rule) {
    return 'styleSheet' in rule;
}
function isCSSStyleRule(rule) {
    return 'selectorText' in rule;
}
//# sourceMappingURL=serializeAttributes.js.map