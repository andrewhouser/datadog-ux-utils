"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackMutation = trackMutation;
exports.sortAddedAndMovedNodes = sortAddedAndMovedNodes;
const browser_core_1 = require("@datadog/browser-core");
const browser_rum_core_1 = require("@datadog/browser-rum-core");
const types_1 = require("../../../types");
const serialization_1 = require("../serialization");
const mutationBatch_1 = require("../mutationBatch");
const assembly_1 = require("../assembly");
/**
 * Buffers and aggregate mutations generated by a MutationObserver into MutationPayload
 */
function trackMutation(mutationCallback, configuration, shadowRootsController, target) {
    const MutationObserver = (0, browser_rum_core_1.getMutationObserverConstructor)();
    if (!MutationObserver) {
        return { stop: browser_core_1.noop, flush: browser_core_1.noop };
    }
    const mutationBatch = (0, mutationBatch_1.createMutationBatch)((mutations) => {
        processMutations(mutations.concat(observer.takeRecords()), mutationCallback, configuration, shadowRootsController);
    });
    const observer = new MutationObserver((0, browser_core_1.monitor)(mutationBatch.addMutations));
    observer.observe(target, {
        attributeOldValue: true,
        attributes: true,
        characterData: true,
        characterDataOldValue: true,
        childList: true,
        subtree: true,
    });
    return {
        stop: () => {
            observer.disconnect();
            mutationBatch.stop();
        },
        flush: () => {
            mutationBatch.flush();
        },
    };
}
function processMutations(mutations, mutationCallback, configuration, shadowRootsController) {
    const nodePrivacyLevelCache = new Map();
    mutations
        .filter((mutation) => mutation.type === 'childList')
        .forEach((mutation) => {
        mutation.removedNodes.forEach((removedNode) => {
            traverseRemovedShadowDom(removedNode, shadowRootsController.removeShadowRoot);
        });
    });
    // Discard any mutation with a 'target' node that:
    // * isn't injected in the current document or isn't known/serialized yet: those nodes are likely
    // part of a mutation occurring in a parent Node
    // * should be hidden or ignored
    const filteredMutations = mutations.filter((mutation) => mutation.target.isConnected &&
        (0, serialization_1.nodeAndAncestorsHaveSerializedNode)(mutation.target) &&
        (0, browser_rum_core_1.getNodePrivacyLevel)(mutation.target, configuration.defaultPrivacyLevel, nodePrivacyLevelCache) !==
            browser_rum_core_1.NodePrivacyLevel.HIDDEN);
    const serializationStats = (0, serialization_1.createSerializationStats)();
    const { adds, removes, hasBeenSerialized } = processChildListMutations(filteredMutations.filter((mutation) => mutation.type === 'childList'), configuration, serializationStats, shadowRootsController, nodePrivacyLevelCache);
    const texts = processCharacterDataMutations(filteredMutations.filter((mutation) => mutation.type === 'characterData' && !hasBeenSerialized(mutation.target)), configuration, nodePrivacyLevelCache);
    const attributes = processAttributesMutations(filteredMutations.filter((mutation) => mutation.type === 'attributes' && !hasBeenSerialized(mutation.target)), configuration, nodePrivacyLevelCache);
    if (!texts.length && !attributes.length && !removes.length && !adds.length) {
        return;
    }
    mutationCallback((0, assembly_1.assembleIncrementalSnapshot)(types_1.IncrementalSource.Mutation, { adds, removes, texts, attributes }), serializationStats);
}
function processChildListMutations(mutations, configuration, serializationStats, shadowRootsController, nodePrivacyLevelCache) {
    // First, we iterate over mutations to collect:
    //
    // * nodes that have been added in the document and not removed by a subsequent mutation
    // * nodes that have been removed from the document but were not added in a previous mutation
    //
    // For this second category, we also collect their previous parent (mutation.target) because we'll
    // need it to emit a 'remove' mutation.
    //
    // Those two categories may overlap: if a node moved from a position to another, it is reported as
    // two mutation records, one with a "removedNodes" and the other with "addedNodes". In this case,
    // the node will be in both sets.
    const addedAndMovedNodes = new Set();
    const removedNodes = new Map();
    for (const mutation of mutations) {
        mutation.addedNodes.forEach((node) => {
            addedAndMovedNodes.add(node);
        });
        mutation.removedNodes.forEach((node) => {
            if (!addedAndMovedNodes.has(node)) {
                removedNodes.set(node, mutation.target);
            }
            addedAndMovedNodes.delete(node);
        });
    }
    // Then, we sort nodes that are still in the document by topological order, for two reasons:
    //
    // * We will serialize each added nodes with their descendants. We don't want to serialize a node
    // twice, so we need to iterate over the parent nodes first and skip any node that is contained in
    // a precedent node.
    //
    // * To emit "add" mutations, we need references to the parent and potential next sibling of each
    // added node. So we need to iterate over the parent nodes first, and when multiple nodes are
    // siblings, we want to iterate from last to first. This will ensure that any "next" node is
    // already serialized and have an id.
    const sortedAddedAndMovedNodes = Array.from(addedAndMovedNodes);
    sortAddedAndMovedNodes(sortedAddedAndMovedNodes);
    // Then, we iterate over our sorted node sets to emit mutations. We collect the newly serialized
    // node ids in a set to be able to skip subsequent related mutations.
    const serializedNodeIds = new Set();
    const serializationContext = {
        status: 2 /* SerializationContextStatus.MUTATION */,
        serializationStats,
        shadowRootsController,
    };
    const addedNodeMutations = [];
    for (const node of sortedAddedAndMovedNodes) {
        if (hasBeenSerialized(node)) {
            continue;
        }
        const parentNodePrivacyLevel = (0, browser_rum_core_1.getNodePrivacyLevel)(node.parentNode, configuration.defaultPrivacyLevel, nodePrivacyLevelCache);
        if (parentNodePrivacyLevel === browser_rum_core_1.NodePrivacyLevel.HIDDEN || parentNodePrivacyLevel === browser_rum_core_1.NodePrivacyLevel.IGNORE) {
            continue;
        }
        const serializedNode = (0, serialization_1.serializeNodeWithId)(node, {
            serializedNodeIds,
            parentNodePrivacyLevel,
            serializationContext,
            configuration,
        });
        if (!serializedNode) {
            continue;
        }
        const parentNode = (0, browser_rum_core_1.getParentNode)(node);
        addedNodeMutations.push({
            nextId: getNextSibling(node),
            parentId: (0, serialization_1.getSerializedNodeId)(parentNode),
            node: serializedNode,
        });
    }
    // Finally, we emit remove mutations.
    const removedNodeMutations = [];
    removedNodes.forEach((parent, node) => {
        if ((0, serialization_1.hasSerializedNode)(node)) {
            removedNodeMutations.push({
                parentId: (0, serialization_1.getSerializedNodeId)(parent),
                id: (0, serialization_1.getSerializedNodeId)(node),
            });
        }
    });
    return { adds: addedNodeMutations, removes: removedNodeMutations, hasBeenSerialized };
    function hasBeenSerialized(node) {
        return (0, serialization_1.hasSerializedNode)(node) && serializedNodeIds.has((0, serialization_1.getSerializedNodeId)(node));
    }
    function getNextSibling(node) {
        let nextSibling = node.nextSibling;
        while (nextSibling) {
            if ((0, serialization_1.hasSerializedNode)(nextSibling)) {
                return (0, serialization_1.getSerializedNodeId)(nextSibling);
            }
            nextSibling = nextSibling.nextSibling;
        }
        return null;
    }
}
function processCharacterDataMutations(mutations, configuration, nodePrivacyLevelCache) {
    var _a;
    const textMutations = [];
    // Deduplicate mutations based on their target node
    const handledNodes = new Set();
    const filteredMutations = mutations.filter((mutation) => {
        if (handledNodes.has(mutation.target)) {
            return false;
        }
        handledNodes.add(mutation.target);
        return true;
    });
    // Emit mutations
    for (const mutation of filteredMutations) {
        const value = mutation.target.textContent;
        if (value === mutation.oldValue) {
            continue;
        }
        const parentNodePrivacyLevel = (0, browser_rum_core_1.getNodePrivacyLevel)((0, browser_rum_core_1.getParentNode)(mutation.target), configuration.defaultPrivacyLevel, nodePrivacyLevelCache);
        if (parentNodePrivacyLevel === browser_rum_core_1.NodePrivacyLevel.HIDDEN || parentNodePrivacyLevel === browser_rum_core_1.NodePrivacyLevel.IGNORE) {
            continue;
        }
        textMutations.push({
            id: (0, serialization_1.getSerializedNodeId)(mutation.target),
            // TODO: pass a valid "ignoreWhiteSpace" argument
            value: (_a = (0, browser_rum_core_1.getTextContent)(mutation.target, false, parentNodePrivacyLevel)) !== null && _a !== void 0 ? _a : null,
        });
    }
    return textMutations;
}
function processAttributesMutations(mutations, configuration, nodePrivacyLevelCache) {
    const attributeMutations = [];
    // Deduplicate mutations based on their target node and changed attribute
    const handledElements = new Map();
    const filteredMutations = mutations.filter((mutation) => {
        const handledAttributes = handledElements.get(mutation.target);
        if (handledAttributes && handledAttributes.has(mutation.attributeName)) {
            return false;
        }
        if (!handledAttributes) {
            handledElements.set(mutation.target, new Set([mutation.attributeName]));
        }
        else {
            handledAttributes.add(mutation.attributeName);
        }
        return true;
    });
    // Emit mutations
    const emittedMutations = new Map();
    for (const mutation of filteredMutations) {
        const uncensoredValue = mutation.target.getAttribute(mutation.attributeName);
        if (uncensoredValue === mutation.oldValue) {
            continue;
        }
        const privacyLevel = (0, browser_rum_core_1.getNodePrivacyLevel)(mutation.target, configuration.defaultPrivacyLevel, nodePrivacyLevelCache);
        const attributeValue = (0, serialization_1.serializeAttribute)(mutation.target, privacyLevel, mutation.attributeName, configuration);
        let transformedValue;
        if (mutation.attributeName === 'value') {
            const inputValue = (0, serialization_1.getElementInputValue)(mutation.target, privacyLevel);
            if (inputValue === undefined) {
                continue;
            }
            transformedValue = inputValue;
        }
        else if (typeof attributeValue === 'string') {
            transformedValue = attributeValue;
        }
        else {
            transformedValue = null;
        }
        let emittedMutation = emittedMutations.get(mutation.target);
        if (!emittedMutation) {
            emittedMutation = {
                id: (0, serialization_1.getSerializedNodeId)(mutation.target),
                attributes: {},
            };
            attributeMutations.push(emittedMutation);
            emittedMutations.set(mutation.target, emittedMutation);
        }
        emittedMutation.attributes[mutation.attributeName] = transformedValue;
    }
    return attributeMutations;
}
function sortAddedAndMovedNodes(nodes) {
    nodes.sort((a, b) => {
        const position = a.compareDocumentPosition(b);
        /* eslint-disable no-bitwise */
        if (position & Node.DOCUMENT_POSITION_CONTAINED_BY) {
            return -1;
        }
        else if (position & Node.DOCUMENT_POSITION_CONTAINS) {
            return 1;
        }
        else if (position & Node.DOCUMENT_POSITION_FOLLOWING) {
            return 1;
        }
        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {
            return -1;
        }
        /* eslint-enable no-bitwise */
        return 0;
    });
}
function traverseRemovedShadowDom(removedNode, shadowDomRemovedCallback) {
    if ((0, browser_rum_core_1.isNodeShadowHost)(removedNode)) {
        shadowDomRemovedCallback(removedNode.shadowRoot);
    }
    (0, browser_rum_core_1.forEachChildNodes)(removedNode, (childNode) => traverseRemovedShadowDom(childNode, shadowDomRemovedCallback));
}
//# sourceMappingURL=trackMutation.js.map