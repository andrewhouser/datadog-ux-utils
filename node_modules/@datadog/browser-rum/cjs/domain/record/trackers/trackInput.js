"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackInput = trackInput;
const browser_core_1 = require("@datadog/browser-core");
const browser_rum_core_1 = require("@datadog/browser-rum-core");
const types_1 = require("../../../types");
const eventsUtils_1 = require("../eventsUtils");
const serialization_1 = require("../serialization");
const assembly_1 = require("../assembly");
function trackInput(configuration, inputCb, target = document) {
    const defaultPrivacyLevel = configuration.defaultPrivacyLevel;
    const lastInputStateMap = new WeakMap();
    const isShadowRoot = target !== document;
    const { stop: stopEventListeners } = (0, browser_core_1.addEventListeners)(configuration, target, 
    // The 'input' event bubbles across shadow roots, so we don't have to listen for it on shadow
    // roots since it will be handled by the event listener that we did add to the document. Only
    // the 'change' event is blocked and needs to be handled on shadow roots.
    isShadowRoot ? ["change" /* DOM_EVENT.CHANGE */] : ["input" /* DOM_EVENT.INPUT */, "change" /* DOM_EVENT.CHANGE */], (event) => {
        const target = (0, eventsUtils_1.getEventTarget)(event);
        if (target instanceof HTMLInputElement ||
            target instanceof HTMLTextAreaElement ||
            target instanceof HTMLSelectElement) {
            onElementChange(target);
        }
    }, {
        capture: true,
        passive: true,
    });
    let stopPropertySetterInstrumentation;
    if (!isShadowRoot) {
        const instrumentationStoppers = [
            (0, browser_core_1.instrumentSetter)(HTMLInputElement.prototype, 'value', onElementChange),
            (0, browser_core_1.instrumentSetter)(HTMLInputElement.prototype, 'checked', onElementChange),
            (0, browser_core_1.instrumentSetter)(HTMLSelectElement.prototype, 'value', onElementChange),
            (0, browser_core_1.instrumentSetter)(HTMLTextAreaElement.prototype, 'value', onElementChange),
            (0, browser_core_1.instrumentSetter)(HTMLSelectElement.prototype, 'selectedIndex', onElementChange),
        ];
        stopPropertySetterInstrumentation = () => {
            instrumentationStoppers.forEach((stopper) => stopper.stop());
        };
    }
    else {
        stopPropertySetterInstrumentation = browser_core_1.noop;
    }
    return {
        stop: () => {
            stopPropertySetterInstrumentation();
            stopEventListeners();
        },
    };
    function onElementChange(target) {
        const nodePrivacyLevel = (0, browser_rum_core_1.getNodePrivacyLevel)(target, defaultPrivacyLevel);
        if (nodePrivacyLevel === browser_rum_core_1.NodePrivacyLevel.HIDDEN) {
            return;
        }
        const type = target.type;
        let inputState;
        if (type === 'radio' || type === 'checkbox') {
            if ((0, browser_rum_core_1.shouldMaskNode)(target, nodePrivacyLevel)) {
                return;
            }
            inputState = { isChecked: target.checked };
        }
        else {
            const value = (0, serialization_1.getElementInputValue)(target, nodePrivacyLevel);
            if (value === undefined) {
                return;
            }
            inputState = { text: value };
        }
        // Can be multiple changes on the same node within the same batched mutation observation.
        cbWithDedup(target, inputState);
        // If a radio was checked, other radios with the same name attribute will be unchecked.
        const name = target.name;
        if (type === 'radio' && name && target.checked) {
            document.querySelectorAll(`input[type="radio"][name="${CSS.escape(name)}"]`).forEach((el) => {
                if (el !== target) {
                    // TODO: Consider the privacy implications for various differing input privacy levels
                    cbWithDedup(el, { isChecked: false });
                }
            });
        }
    }
    /**
     * There can be multiple changes on the same node within the same batched mutation observation.
     */
    function cbWithDedup(target, inputState) {
        if (!(0, serialization_1.hasSerializedNode)(target)) {
            return;
        }
        const lastInputState = lastInputStateMap.get(target);
        if (!lastInputState ||
            lastInputState.text !== inputState.text ||
            lastInputState.isChecked !== inputState.isChecked) {
            lastInputStateMap.set(target, inputState);
            inputCb((0, assembly_1.assembleIncrementalSnapshot)(types_1.IncrementalSource.Input, {
                id: (0, serialization_1.getSerializedNodeId)(target),
                ...inputState,
            }));
        }
    }
}
//# sourceMappingURL=trackInput.js.map