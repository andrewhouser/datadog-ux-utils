"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackViewportResize = trackViewportResize;
exports.trackVisualViewportResize = trackVisualViewportResize;
const browser_core_1 = require("@datadog/browser-core");
const browser_rum_core_1 = require("@datadog/browser-rum-core");
const types_1 = require("../../../types");
const viewports_1 = require("../viewports");
const assembly_1 = require("../assembly");
const VISUAL_VIEWPORT_OBSERVER_THRESHOLD = 200;
function trackViewportResize(configuration, viewportResizeCb) {
    const viewportResizeSubscription = (0, browser_rum_core_1.initViewportObservable)(configuration).subscribe((data) => {
        viewportResizeCb((0, assembly_1.assembleIncrementalSnapshot)(types_1.IncrementalSource.ViewportResize, data));
    });
    return {
        stop: () => {
            viewportResizeSubscription.unsubscribe();
        },
    };
}
function trackVisualViewportResize(configuration, visualViewportResizeCb) {
    const visualViewport = window.visualViewport;
    if (!visualViewport) {
        return { stop: browser_core_1.noop };
    }
    const { throttled: updateDimension, cancel: cancelThrottle } = (0, browser_core_1.throttle)(() => {
        visualViewportResizeCb({
            data: (0, viewports_1.getVisualViewport)(visualViewport),
            type: types_1.RecordType.VisualViewport,
            timestamp: (0, browser_core_1.timeStampNow)(),
        });
    }, VISUAL_VIEWPORT_OBSERVER_THRESHOLD, {
        trailing: false,
    });
    const { stop: removeListener } = (0, browser_core_1.addEventListeners)(configuration, visualViewport, ["resize" /* DOM_EVENT.RESIZE */, "scroll" /* DOM_EVENT.SCROLL */], updateDimension, {
        capture: true,
        passive: true,
    });
    return {
        stop: () => {
            removeListener();
            cancelThrottle();
        },
    };
}
//# sourceMappingURL=trackViewportResize.js.map