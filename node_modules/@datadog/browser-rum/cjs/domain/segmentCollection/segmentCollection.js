"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SEGMENT_BYTES_LIMIT = exports.SEGMENT_DURATION_LIMIT = void 0;
exports.startSegmentCollection = startSegmentCollection;
exports.doStartSegmentCollection = doStartSegmentCollection;
exports.computeSegmentContext = computeSegmentContext;
exports.setSegmentBytesLimit = setSegmentBytesLimit;
const browser_core_1 = require("@datadog/browser-core");
const buildReplayPayload_1 = require("./buildReplayPayload");
const segment_1 = require("./segment");
exports.SEGMENT_DURATION_LIMIT = 5 * browser_core_1.ONE_SECOND;
/**
 * beacon payload max queue size implementation is 64kb
 * ensure that we leave room for logs, rum and potential other users
 */
exports.SEGMENT_BYTES_LIMIT = 60000;
function startSegmentCollection(lifeCycle, configuration, sessionManager, viewHistory, httpRequest, encoder) {
    return doStartSegmentCollection(lifeCycle, () => computeSegmentContext(configuration.applicationId, sessionManager, viewHistory), httpRequest, encoder);
}
function doStartSegmentCollection(lifeCycle, getSegmentContext, httpRequest, encoder) {
    let state = {
        status: 0 /* SegmentCollectionStatus.WaitingForInitialRecord */,
        nextSegmentCreationReason: 'init',
    };
    const { unsubscribe: unsubscribeViewCreated } = lifeCycle.subscribe(2 /* LifeCycleEventType.VIEW_CREATED */, () => {
        flushSegment('view_change');
    });
    const { unsubscribe: unsubscribePageMayExit } = lifeCycle.subscribe(11 /* LifeCycleEventType.PAGE_MAY_EXIT */, (pageMayExitEvent) => {
        flushSegment(pageMayExitEvent.reason);
    });
    function flushSegment(flushReason) {
        if (state.status === 1 /* SegmentCollectionStatus.SegmentPending */) {
            state.segment.flush((metadata, stats, encoderResult) => {
                const payload = (0, buildReplayPayload_1.buildReplayPayload)(encoderResult.output, metadata, stats, encoderResult.rawBytesCount);
                if ((0, browser_core_1.isPageExitReason)(flushReason)) {
                    httpRequest.sendOnExit(payload);
                }
                else {
                    httpRequest.send(payload);
                }
            });
            (0, browser_core_1.clearTimeout)(state.expirationTimeoutId);
        }
        if (flushReason !== 'stop') {
            state = {
                status: 0 /* SegmentCollectionStatus.WaitingForInitialRecord */,
                nextSegmentCreationReason: flushReason,
            };
        }
        else {
            state = {
                status: 2 /* SegmentCollectionStatus.Stopped */,
            };
        }
    }
    return {
        addRecord: (record, stats) => {
            if (state.status === 2 /* SegmentCollectionStatus.Stopped */) {
                return;
            }
            if (state.status === 0 /* SegmentCollectionStatus.WaitingForInitialRecord */) {
                const context = getSegmentContext();
                if (!context) {
                    return;
                }
                state = {
                    status: 1 /* SegmentCollectionStatus.SegmentPending */,
                    segment: (0, segment_1.createSegment)({ encoder, context, creationReason: state.nextSegmentCreationReason }),
                    expirationTimeoutId: (0, browser_core_1.setTimeout)(() => {
                        flushSegment('segment_duration_limit');
                    }, exports.SEGMENT_DURATION_LIMIT),
                };
            }
            state.segment.addRecord(record, stats, (encodedBytesCount) => {
                if (encodedBytesCount > exports.SEGMENT_BYTES_LIMIT) {
                    flushSegment('segment_bytes_limit');
                }
            });
        },
        stop: () => {
            flushSegment('stop');
            unsubscribeViewCreated();
            unsubscribePageMayExit();
        },
    };
}
function computeSegmentContext(applicationId, sessionManager, viewHistory) {
    const session = sessionManager.findTrackedSession();
    const viewContext = viewHistory.findView();
    if (!session || !viewContext) {
        return undefined;
    }
    return {
        application: {
            id: applicationId,
        },
        session: {
            id: session.id,
        },
        view: {
            id: viewContext.id,
        },
    };
}
function setSegmentBytesLimit(newSegmentBytesLimit = 60000) {
    exports.SEGMENT_BYTES_LIMIT = newSegmentBytesLimit;
}
//# sourceMappingURL=segmentCollection.js.map