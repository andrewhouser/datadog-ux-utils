"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSegment = createSegment;
const types_1 = require("../../types");
const replayStats = __importStar(require("../replayStats"));
const record_1 = require("../record");
function createSegment({ context, creationReason, encoder, }) {
    let encodedBytesCount = 0;
    const viewId = context.view.id;
    const indexInView = replayStats.getSegmentsCount(viewId);
    const metadata = {
        start: Infinity,
        end: -Infinity,
        creation_reason: creationReason,
        records_count: 0,
        has_full_snapshot: false,
        index_in_view: indexInView,
        source: 'browser',
        ...context,
    };
    const serializationStats = (0, record_1.createSerializationStats)();
    replayStats.addSegment(viewId);
    function addRecord(record, stats, callback) {
        metadata.start = Math.min(metadata.start, record.timestamp);
        metadata.end = Math.max(metadata.end, record.timestamp);
        metadata.records_count += 1;
        metadata.has_full_snapshot || (metadata.has_full_snapshot = record.type === types_1.RecordType.FullSnapshot);
        if (stats) {
            (0, record_1.aggregateSerializationStats)(serializationStats, stats);
        }
        const prefix = encoder.isEmpty ? '{"records":[' : ',';
        encoder.write(prefix + JSON.stringify(record), (additionalEncodedBytesCount) => {
            encodedBytesCount += additionalEncodedBytesCount;
            callback(encodedBytesCount);
        });
    }
    function flush(callback) {
        if (encoder.isEmpty) {
            throw new Error('Empty segment flushed');
        }
        encoder.write(`],${JSON.stringify(metadata).slice(1)}\n`);
        encoder.finish((encoderResult) => {
            replayStats.addWroteData(metadata.view.id, encoderResult.rawBytesCount);
            callback(metadata, serializationStats, encoderResult);
        });
    }
    return { addRecord, flush };
}
//# sourceMappingURL=segment.js.map