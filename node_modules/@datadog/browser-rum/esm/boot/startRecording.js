import { createHttpRequest, addTelemetryDebug, canUseEventBridge } from '@datadog/browser-core';
import { record } from '../domain/record';
import { startSegmentCollection, SEGMENT_BYTES_LIMIT, startSegmentTelemetry } from '../domain/segmentCollection';
import { startRecordBridge } from '../domain/startRecordBridge';
export function startRecording(lifeCycle, configuration, sessionManager, viewHistory, encoder, telemetry, httpRequest) {
    const cleanupTasks = [];
    const reportError = (error) => {
        lifeCycle.notify(14 /* LifeCycleEventType.RAW_ERROR_COLLECTED */, { error });
        addTelemetryDebug('Error reported to customer', { 'error.message': error.message });
    };
    const replayRequest = httpRequest || createHttpRequest(configuration.sessionReplayEndpointBuilder, SEGMENT_BYTES_LIMIT, reportError);
    let addRecord;
    if (!canUseEventBridge()) {
        const segmentCollection = startSegmentCollection(lifeCycle, configuration, sessionManager, viewHistory, replayRequest, encoder);
        addRecord = segmentCollection.addRecord;
        cleanupTasks.push(segmentCollection.stop);
        const segmentTelemetry = startSegmentTelemetry(configuration, telemetry, replayRequest.observable);
        cleanupTasks.push(segmentTelemetry.stop);
    }
    else {
        ;
        ({ addRecord } = startRecordBridge(viewHistory));
    }
    const { stop: stopRecording } = record({
        emit: addRecord,
        configuration,
        lifeCycle,
        viewHistory,
    });
    cleanupTasks.push(stopRecording);
    return {
        stop: () => {
            cleanupTasks.forEach((task) => task());
        },
    };
}
//# sourceMappingURL=startRecording.js.map