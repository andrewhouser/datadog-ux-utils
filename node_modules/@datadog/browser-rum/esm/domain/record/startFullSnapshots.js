import { getScrollX, getScrollY, getViewportDimension } from '@datadog/browser-rum-core';
import { timeStampNow } from '@datadog/browser-core';
import { RecordType } from '../../types';
import { createSerializationStats, serializeDocument } from './serialization';
import { getVisualViewport } from './viewports';
export function startFullSnapshots(elementsScrollPositions, shadowRootsController, lifeCycle, configuration, flushMutations, emit) {
    const takeFullSnapshot = (timestamp, status) => {
        const { width, height } = getViewportDimension();
        emit({
            data: {
                height,
                href: window.location.href,
                width,
            },
            type: RecordType.Meta,
            timestamp,
        });
        emit({
            data: {
                has_focus: document.hasFocus(),
            },
            type: RecordType.Focus,
            timestamp,
        });
        const serializationStats = createSerializationStats();
        const serializationContext = {
            status,
            elementsScrollPositions,
            serializationStats,
            shadowRootsController,
        };
        emit({
            data: {
                node: serializeDocument(document, configuration, serializationContext),
                initialOffset: {
                    left: getScrollX(),
                    top: getScrollY(),
                },
            },
            type: RecordType.FullSnapshot,
            timestamp,
        }, serializationStats);
        if (window.visualViewport) {
            emit({
                data: getVisualViewport(window.visualViewport),
                type: RecordType.VisualViewport,
                timestamp,
            });
        }
    };
    takeFullSnapshot(timeStampNow(), 0 /* SerializationContextStatus.INITIAL_FULL_SNAPSHOT */);
    const { unsubscribe } = lifeCycle.subscribe(2 /* LifeCycleEventType.VIEW_CREATED */, (view) => {
        flushMutations();
        takeFullSnapshot(view.startClocks.timeStamp, 1 /* SerializationContextStatus.SUBSEQUENT_FULL_SNAPSHOT */);
    });
    return {
        stop: unsubscribe,
    };
}
//# sourceMappingURL=startFullSnapshots.js.map