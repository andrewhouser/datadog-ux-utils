import { throttle, addEventListeners, timeStampNow, noop } from '@datadog/browser-core';
import { initViewportObservable } from '@datadog/browser-rum-core';
import { IncrementalSource, RecordType } from '../../../types';
import { getVisualViewport } from '../viewports';
import { assembleIncrementalSnapshot } from '../assembly';
const VISUAL_VIEWPORT_OBSERVER_THRESHOLD = 200;
export function trackViewportResize(configuration, viewportResizeCb) {
    const viewportResizeSubscription = initViewportObservable(configuration).subscribe((data) => {
        viewportResizeCb(assembleIncrementalSnapshot(IncrementalSource.ViewportResize, data));
    });
    return {
        stop: () => {
            viewportResizeSubscription.unsubscribe();
        },
    };
}
export function trackVisualViewportResize(configuration, visualViewportResizeCb) {
    const visualViewport = window.visualViewport;
    if (!visualViewport) {
        return { stop: noop };
    }
    const { throttled: updateDimension, cancel: cancelThrottle } = throttle(() => {
        visualViewportResizeCb({
            data: getVisualViewport(visualViewport),
            type: RecordType.VisualViewport,
            timestamp: timeStampNow(),
        });
    }, VISUAL_VIEWPORT_OBSERVER_THRESHOLD, {
        trailing: false,
    });
    const { stop: removeListener } = addEventListeners(configuration, visualViewport, ["resize" /* DOM_EVENT.RESIZE */, "scroll" /* DOM_EVENT.SCROLL */], updateDimension, {
        capture: true,
        passive: true,
    });
    return {
        stop: () => {
            removeListener();
            cancelThrottle();
        },
    };
}
//# sourceMappingURL=trackViewportResize.js.map