import { sendToExtension } from '@datadog/browser-core';
import * as replayStats from '../replayStats';
import { trackFocus, trackFrustration, trackInput, trackMediaInteraction, trackMouseInteraction, trackMove, trackMutation, trackScroll, trackStyleSheet, trackViewEnd, trackViewportResize, trackVisualViewportResize, } from './trackers';
import { createElementsScrollPositions } from './elementsScrollPositions';
import { initShadowRootsController } from './shadowRootsController';
import { startFullSnapshots } from './startFullSnapshots';
import { initRecordIds } from './recordIds';
export function record(options) {
    const { emit, configuration, lifeCycle } = options;
    // runtime checks for user options
    if (!emit) {
        throw new Error('emit function is required');
    }
    const emitAndComputeStats = (record, stats) => {
        emit(record, stats);
        sendToExtension('record', { record });
        const view = options.viewHistory.findView();
        replayStats.addRecord(view.id);
    };
    const elementsScrollPositions = createElementsScrollPositions();
    const shadowRootsController = initShadowRootsController(configuration, emitAndComputeStats, elementsScrollPositions);
    const { stop: stopFullSnapshots } = startFullSnapshots(elementsScrollPositions, shadowRootsController, lifeCycle, configuration, flushMutations, emitAndComputeStats);
    function flushMutations() {
        shadowRootsController.flush();
        mutationTracker.flush();
    }
    const recordIds = initRecordIds();
    const mutationTracker = trackMutation(emitAndComputeStats, configuration, shadowRootsController, document);
    const trackers = [
        mutationTracker,
        trackMove(configuration, emitAndComputeStats),
        trackMouseInteraction(configuration, emitAndComputeStats, recordIds),
        trackScroll(configuration, emitAndComputeStats, elementsScrollPositions, document),
        trackViewportResize(configuration, emitAndComputeStats),
        trackInput(configuration, emitAndComputeStats),
        trackMediaInteraction(configuration, emitAndComputeStats),
        trackStyleSheet(emitAndComputeStats),
        trackFocus(configuration, emitAndComputeStats),
        trackVisualViewportResize(configuration, emitAndComputeStats),
        trackFrustration(lifeCycle, emitAndComputeStats, recordIds),
        trackViewEnd(lifeCycle, (viewEndRecord) => {
            flushMutations();
            emitAndComputeStats(viewEndRecord);
        }),
    ];
    return {
        stop: () => {
            shadowRootsController.stop();
            trackers.forEach((tracker) => tracker.stop());
            stopFullSnapshots();
        },
        flushMutations,
        shadowRootsController,
    };
}
//# sourceMappingURL=record.js.map