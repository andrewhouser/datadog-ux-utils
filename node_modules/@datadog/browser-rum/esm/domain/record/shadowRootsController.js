import { trackInput, trackMutation, trackScroll } from './trackers';
export const initShadowRootsController = (configuration, callback, elementsScrollPositions) => {
    const controllerByShadowRoot = new Map();
    const shadowRootsController = {
        addShadowRoot: (shadowRoot) => {
            if (controllerByShadowRoot.has(shadowRoot)) {
                return;
            }
            const mutationTracker = trackMutation(callback, configuration, shadowRootsController, shadowRoot);
            // The change event does not bubble up across the shadow root, we have to listen on the shadow root
            const inputTracker = trackInput(configuration, callback, shadowRoot);
            // The scroll event does not bubble up across the shadow root, we have to listen on the shadow root
            const scrollTracker = trackScroll(configuration, callback, elementsScrollPositions, shadowRoot);
            controllerByShadowRoot.set(shadowRoot, {
                flush: () => mutationTracker.flush(),
                stop: () => {
                    mutationTracker.stop();
                    inputTracker.stop();
                    scrollTracker.stop();
                },
            });
        },
        removeShadowRoot: (shadowRoot) => {
            const entry = controllerByShadowRoot.get(shadowRoot);
            if (!entry) {
                // unidentified root cause: observed in some cases with shadow DOM added by browser extensions
                return;
            }
            entry.stop();
            controllerByShadowRoot.delete(shadowRoot);
        },
        stop: () => {
            controllerByShadowRoot.forEach(({ stop }) => stop());
        },
        flush: () => {
            controllerByShadowRoot.forEach(({ flush }) => flush());
        },
    };
    return shadowRootsController;
};
//# sourceMappingURL=shadowRootsController.js.map