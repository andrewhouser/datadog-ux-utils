"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startUserContext = startUserContext;
exports.buildUserContextManager = buildUserContextManager;
const storeContextManager_1 = require("../context/storeContextManager");
const abstractHooks_1 = require("../../tools/abstractHooks");
const contextManager_1 = require("../context/contextManager");
const objectUtils_1 = require("../../tools/utils/objectUtils");
function startUserContext(hooks, configuration, sessionManager, productKey) {
    const userContextManager = buildUserContextManager();
    if (configuration.storeContextsAcrossPages) {
        (0, storeContextManager_1.storeContextManager)(configuration, userContextManager, productKey, 1 /* CustomerDataType.User */);
    }
    hooks.register(0 /* HookNames.Assemble */, ({ eventType, startTime }) => {
        const user = userContextManager.getContext();
        const session = sessionManager.findTrackedSession(startTime);
        if (session && session.anonymousId && !user.anonymous_id && !!configuration.trackAnonymousUser) {
            user.anonymous_id = session.anonymousId;
        }
        if ((0, objectUtils_1.isEmptyObject)(user)) {
            return abstractHooks_1.SKIPPED;
        }
        return {
            type: eventType,
            usr: user,
        };
    });
    hooks.register(1 /* HookNames.AssembleTelemetry */, ({ startTime }) => {
        var _a;
        return ({
            anonymous_id: (_a = sessionManager.findTrackedSession(startTime)) === null || _a === void 0 ? void 0 : _a.anonymousId,
        });
    });
    return userContextManager;
}
function buildUserContextManager() {
    return (0, contextManager_1.createContextManager)('user', {
        propertiesConfig: {
            id: { type: 'string' },
            name: { type: 'string' },
            email: { type: 'string' },
        },
    });
}
//# sourceMappingURL=userContext.js.map