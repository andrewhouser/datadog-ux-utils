"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EXTENSION_PREFIXES = void 0;
exports.containsExtensionUrl = containsExtensionUrl;
exports.isUnsupportedExtensionEnvironment = isUnsupportedExtensionEnvironment;
exports.extractExtensionUrlFromStack = extractExtensionUrlFromStack;
exports.EXTENSION_PREFIXES = ['chrome-extension://', 'moz-extension://'];
function containsExtensionUrl(str) {
    return exports.EXTENSION_PREFIXES.some((prefix) => str.includes(prefix));
}
/**
 * Utility function to detect if the SDK is being initialized in an unsupported browser extension environment.
 *
 * @param windowLocation - The current window location to check
 * @param stack - The error stack to check for extension URLs
 * @returns true if running in an unsupported browser extension environment
 */
function isUnsupportedExtensionEnvironment(windowLocation, stack = '') {
    // If we're on a regular web page but the error stack shows extension URLs,
    // then an extension is injecting RUM.
    return !containsExtensionUrl(windowLocation) && containsExtensionUrl(stack);
}
function extractExtensionUrlFromStack(stack = '') {
    for (const prefix of exports.EXTENSION_PREFIXES) {
        const match = stack.match(new RegExp(`${prefix}[^/]+`));
        if (match) {
            return match[0];
        }
    }
}
//# sourceMappingURL=extensionUtils.js.map