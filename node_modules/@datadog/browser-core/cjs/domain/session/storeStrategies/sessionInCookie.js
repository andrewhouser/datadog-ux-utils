"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectCookieStrategy = selectCookieStrategy;
exports.initCookieStrategy = initCookieStrategy;
exports.retrieveSessionCookie = retrieveSessionCookie;
exports.buildCookieOptions = buildCookieOptions;
const browserDetection_1 = require("../../../tools/utils/browserDetection");
const cookie_1 = require("../../../browser/cookie");
const oldCookiesMigration_1 = require("../oldCookiesMigration");
const sessionConstants_1 = require("../sessionConstants");
const sessionState_1 = require("../sessionState");
const sessionStoreStrategy_1 = require("./sessionStoreStrategy");
function selectCookieStrategy(initConfiguration) {
    const cookieOptions = buildCookieOptions(initConfiguration);
    return (0, cookie_1.areCookiesAuthorized)(cookieOptions) ? { type: sessionConstants_1.SessionPersistence.COOKIE, cookieOptions } : undefined;
}
function initCookieStrategy(configuration, cookieOptions) {
    const cookieStore = {
        /**
         * Lock strategy allows mitigating issues due to concurrent access to cookie.
         * This issue concerns only chromium browsers and enabling this on firefox increases cookie write failures.
         */
        isLockEnabled: (0, browserDetection_1.isChromium)(),
        persistSession: (sessionState) => storeSessionCookie(cookieOptions, configuration, sessionState, sessionConstants_1.SESSION_EXPIRATION_DELAY),
        retrieveSession: retrieveSessionCookie,
        expireSession: (sessionState) => storeSessionCookie(cookieOptions, configuration, (0, sessionState_1.getExpiredSessionState)(sessionState, configuration), sessionConstants_1.SESSION_TIME_OUT_DELAY),
    };
    (0, oldCookiesMigration_1.tryOldCookiesMigration)(cookieStore);
    return cookieStore;
}
function storeSessionCookie(options, configuration, sessionState, defaultTimeout) {
    (0, cookie_1.setCookie)(sessionStoreStrategy_1.SESSION_STORE_KEY, (0, sessionState_1.toSessionString)(sessionState), configuration.trackAnonymousUser ? sessionConstants_1.SESSION_COOKIE_EXPIRATION_DELAY : defaultTimeout, options);
}
function retrieveSessionCookie() {
    const sessionString = (0, cookie_1.getCookie)(sessionStoreStrategy_1.SESSION_STORE_KEY);
    const sessionState = (0, sessionState_1.toSessionState)(sessionString);
    return sessionState;
}
function buildCookieOptions(initConfiguration) {
    const cookieOptions = {};
    cookieOptions.secure =
        !!initConfiguration.useSecureSessionCookie || !!initConfiguration.usePartitionedCrossSiteSessionCookie;
    cookieOptions.crossSite = !!initConfiguration.usePartitionedCrossSiteSessionCookie;
    cookieOptions.partitioned = !!initConfiguration.usePartitionedCrossSiteSessionCookie;
    if (initConfiguration.trackSessionAcrossSubdomains) {
        cookieOptions.domain = (0, cookie_1.getCurrentSite)();
    }
    return cookieOptions;
}
//# sourceMappingURL=sessionInCookie.js.map