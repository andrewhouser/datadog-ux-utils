"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContextManager = createContextManager;
const mergeInto_1 = require("../../tools/mergeInto");
const sanitize_1 = require("../../tools/serialisation/sanitize");
const observable_1 = require("../../tools/observable");
const display_1 = require("../../tools/display");
const contextUtils_1 = require("./contextUtils");
function ensureProperties(context, propertiesConfig, name) {
    const newContext = { ...context };
    for (const [key, { required, type }] of Object.entries(propertiesConfig)) {
        /**
         * Ensure specified properties are strings as defined here:
         * https://docs.datadoghq.com/logs/log_configuration/attributes_naming_convention/#user-related-attributes
         */
        if (type === 'string' && !isDefined(newContext[key])) {
            /* eslint-disable @typescript-eslint/no-base-to-string */
            newContext[key] = String(newContext[key]);
        }
        if (required && isDefined(newContext[key])) {
            display_1.display.warn(`The property ${key} of ${name} is required; context will not be sent to the intake.`);
        }
    }
    return newContext;
}
function isDefined(value) {
    return value === undefined || value === null || value === '';
}
function createContextManager(name = '', { propertiesConfig = {}, } = {}) {
    let context = {};
    const changeObservable = new observable_1.Observable();
    const contextManager = {
        getContext: () => (0, mergeInto_1.deepClone)(context),
        setContext: (newContext) => {
            if ((0, contextUtils_1.checkContext)(newContext)) {
                context = (0, sanitize_1.sanitize)(ensureProperties(newContext, propertiesConfig, name));
            }
            else {
                contextManager.clearContext();
            }
            changeObservable.notify();
        },
        setContextProperty: (key, property) => {
            context = (0, sanitize_1.sanitize)(ensureProperties({ ...context, [key]: property }, propertiesConfig, name));
            changeObservable.notify();
        },
        removeContextProperty: (key) => {
            delete context[key];
            ensureProperties(context, propertiesConfig, name);
            changeObservable.notify();
        },
        clearContext: () => {
            context = {};
            changeObservable.notify();
        },
        changeObservable,
    };
    return contextManager;
}
//# sourceMappingURL=contextManager.js.map