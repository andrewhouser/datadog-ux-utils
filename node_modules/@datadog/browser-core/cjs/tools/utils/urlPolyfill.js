"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeUrl = normalizeUrl;
exports.isValidUrl = isValidUrl;
exports.getPathName = getPathName;
exports.buildUrl = buildUrl;
exports.getPristineWindow = getPristineWindow;
const jsonStringify_1 = require("../serialisation/jsonStringify");
function normalizeUrl(url) {
    return buildUrl(url, location.href).href;
}
function isValidUrl(url) {
    try {
        return !!buildUrl(url);
    }
    catch (_a) {
        return false;
    }
}
function getPathName(url) {
    const pathname = buildUrl(url).pathname;
    return pathname[0] === '/' ? pathname : `/${pathname}`;
}
function buildUrl(url, base) {
    const { URL } = getPristineWindow();
    try {
        return base !== undefined ? new URL(url, base) : new URL(url);
    }
    catch (error) {
        throw new Error(`Failed to construct URL: ${String(error)} ${(0, jsonStringify_1.jsonStringify)({ url, base })}`);
    }
}
/**
 * Get native URL constructor from a clean iframe
 * This avoids polyfill issues by getting the native implementation from a fresh iframe context
 * Falls back to the original URL constructor if iframe approach fails
 */
let getPristineGlobalObjectCache;
function getPristineWindow() {
    if (!getPristineGlobalObjectCache) {
        let iframe;
        let pristineWindow;
        try {
            iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
            pristineWindow = iframe.contentWindow;
        }
        catch (_a) {
            pristineWindow = window;
        }
        getPristineGlobalObjectCache = {
            URL: pristineWindow.URL,
        };
        iframe === null || iframe === void 0 ? void 0 : iframe.remove();
    }
    return getPristineGlobalObjectCache;
}
//# sourceMappingURL=urlPolyfill.js.map