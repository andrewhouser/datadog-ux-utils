import type { Context } from '../../tools/serialisation/context';
import type { Configuration } from '../configuration';
import { BufferedObservable, Observable } from '../../tools/observable';
import type { RawError } from '../error/error.types';
import type { StackTrace } from '../../tools/stackTrace/computeStackTrace';
import type { Encoder } from '../../tools/encoder';
import type { PageMayExitEvent } from '../../browser/pageMayExitObservable';
import { DeflateEncoderStreamId } from '../deflate';
import type { AbstractHooks } from '../../tools/abstractHooks';
import type { TelemetryEvent } from './telemetryEvent.types';
import type { RawTelemetryConfiguration, RawTelemetryEvent, RawTelemetryUsage } from './rawTelemetryEvent.types';
export declare const enum TelemetryService {
    LOGS = "browser-logs-sdk",
    RUM = "browser-rum-sdk"
}
export interface Telemetry {
    stop: () => void;
    enabled: boolean;
}
export declare function getTelemetryObservable(): BufferedObservable<{
    rawEvent: RawTelemetryEvent;
    kind: string;
}>;
export declare function startTelemetry(telemetryService: TelemetryService, configuration: Configuration, hooks: AbstractHooks, reportError: (error: RawError) => void, pageMayExitObservable: Observable<PageMayExitEvent>, createEncoder: (streamId: DeflateEncoderStreamId) => Encoder): Telemetry;
export declare function startTelemetryCollection(telemetryService: TelemetryService, configuration: Configuration, hooks: AbstractHooks, observable: Observable<TelemetryEvent & Context>): {
    enabled: boolean;
};
export declare function resetTelemetry(): void;
/**
 * Avoid mixing telemetry events from different data centers
 * but keep replicating staging events for reliability
 */
export declare function isTelemetryReplicationAllowed(configuration: Configuration): boolean;
export declare function addTelemetryDebug(message: string, context?: Context): void;
export declare function addTelemetryError(e: unknown, context?: Context): void;
export declare function addTelemetryConfiguration(configuration: RawTelemetryConfiguration): void;
export declare function addTelemetryMetrics(kind: string, context?: Context): void;
export declare function addTelemetryUsage(usage: RawTelemetryUsage): void;
export declare function formatError(e: unknown): {
    error: {
        kind: string | undefined;
        stack: string;
    };
    message: string;
} | {
    error: {
        stack: string;
        kind?: undefined;
    };
    message: string;
};
export declare function scrubCustomerFrames(stackTrace: StackTrace): StackTrace;
