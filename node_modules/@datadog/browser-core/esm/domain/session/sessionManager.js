import { Observable } from '../../tools/observable';
import { createValueHistory } from '../../tools/valueHistory';
import { clocksOrigin, ONE_MINUTE, relativeNow } from '../../tools/utils/timeUtils';
import { addEventListener, addEventListeners } from '../../browser/addEventListener';
import { clearInterval, setInterval } from '../../tools/timer';
import { addTelemetryDebug } from '../telemetry';
import { isSyntheticsTest } from '../synthetics/syntheticsWorkerValues';
import { getCurrentSite } from '../../browser/cookie';
import { SESSION_NOT_TRACKED, SESSION_TIME_OUT_DELAY } from './sessionConstants';
import { startSessionStore } from './sessionStore';
import { retrieveSessionCookie } from './storeStrategies/sessionInCookie';
export const VISIBILITY_CHECK_DELAY = ONE_MINUTE;
const SESSION_CONTEXT_TIMEOUT_DELAY = SESSION_TIME_OUT_DELAY;
let stopCallbacks = [];
export function startSessionManager(configuration, productKey, computeTrackingType, trackingConsentState) {
    const renewObservable = new Observable();
    const expireObservable = new Observable();
    // TODO - Improve configuration type and remove assertion
    const sessionStore = startSessionStore(configuration.sessionStoreStrategyType, configuration, productKey, computeTrackingType);
    stopCallbacks.push(() => sessionStore.stop());
    const sessionContextHistory = createValueHistory({
        expireDelay: SESSION_CONTEXT_TIMEOUT_DELAY,
    });
    stopCallbacks.push(() => sessionContextHistory.stop());
    sessionStore.renewObservable.subscribe(() => {
        sessionContextHistory.add(buildSessionContext(), relativeNow());
        renewObservable.notify();
    });
    sessionStore.expireObservable.subscribe(() => {
        expireObservable.notify();
        sessionContextHistory.closeActive(relativeNow());
    });
    // We expand/renew session unconditionally as tracking consent is always granted when the session
    // manager is started.
    sessionStore.expandOrRenewSession();
    sessionContextHistory.add(buildSessionContext(), clocksOrigin().relative);
    trackingConsentState.observable.subscribe(() => {
        if (trackingConsentState.isGranted()) {
            sessionStore.expandOrRenewSession();
        }
        else {
            sessionStore.expire();
        }
    });
    trackActivity(configuration, () => {
        if (trackingConsentState.isGranted()) {
            sessionStore.expandOrRenewSession();
        }
    });
    trackVisibility(configuration, () => sessionStore.expandSession());
    trackResume(configuration, () => sessionStore.restartSession());
    function buildSessionContext() {
        const session = sessionStore.getSession();
        if (!session) {
            reportUnexpectedSessionState().catch(() => void 0); // Ignore errors
            return {
                id: 'invalid',
                trackingType: SESSION_NOT_TRACKED,
                isReplayForced: false,
                anonymousId: undefined,
            };
        }
        return {
            id: session.id,
            trackingType: session[productKey],
            isReplayForced: !!session.forcedReplay,
            anonymousId: session.anonymousId,
        };
    }
    return {
        findSession: (startTime, options) => sessionContextHistory.find(startTime, options),
        renewObservable,
        expireObservable,
        sessionStateUpdateObservable: sessionStore.sessionStateUpdateObservable,
        expire: sessionStore.expire,
        updateSessionState: sessionStore.updateSessionState,
    };
}
export function stopSessionManager() {
    stopCallbacks.forEach((e) => e());
    stopCallbacks = [];
}
function trackActivity(configuration, expandOrRenewSession) {
    const { stop } = addEventListeners(configuration, window, ["click" /* DOM_EVENT.CLICK */, "touchstart" /* DOM_EVENT.TOUCH_START */, "keydown" /* DOM_EVENT.KEY_DOWN */, "scroll" /* DOM_EVENT.SCROLL */], expandOrRenewSession, { capture: true, passive: true });
    stopCallbacks.push(stop);
}
function trackVisibility(configuration, expandSession) {
    const expandSessionWhenVisible = () => {
        if (document.visibilityState === 'visible') {
            expandSession();
        }
    };
    const { stop } = addEventListener(configuration, document, "visibilitychange" /* DOM_EVENT.VISIBILITY_CHANGE */, expandSessionWhenVisible);
    stopCallbacks.push(stop);
    const visibilityCheckInterval = setInterval(expandSessionWhenVisible, VISIBILITY_CHECK_DELAY);
    stopCallbacks.push(() => {
        clearInterval(visibilityCheckInterval);
    });
}
function trackResume(configuration, cb) {
    const { stop } = addEventListener(configuration, window, "resume" /* DOM_EVENT.RESUME */, cb, { capture: true });
    stopCallbacks.push(stop);
}
async function reportUnexpectedSessionState() {
    const rawSession = retrieveSessionCookie();
    let sessionCookies = [];
    if ('cookieStore' in window) {
        sessionCookies = await window.cookieStore.getAll('_dd_s');
    }
    else {
        sessionCookies = document.cookie.split(/\s*;\s*/).filter((cookie) => cookie.startsWith('_dd_s'));
    }
    addTelemetryDebug('Unexpected session state', {
        session: rawSession,
        isSyntheticsTest: isSyntheticsTest(),
        createdTimestamp: rawSession === null || rawSession === void 0 ? void 0 : rawSession.created,
        expireTimestamp: rawSession === null || rawSession === void 0 ? void 0 : rawSession.expire,
        cookie: {
            count: sessionCookies.length,
            domain: getCurrentSite(),
            ...sessionCookies,
        },
        currentDomain: `${window.location.protocol}//${window.location.hostname}`,
    });
}
//# sourceMappingURL=sessionManager.js.map