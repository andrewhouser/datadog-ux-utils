import { addTelemetryUsage } from '../telemetry';
import { monitor } from '../../tools/monitor';
export function defineContextMethod(getStrategy, contextName, methodName, usage) {
    return monitor((...args) => {
        if (usage) {
            addTelemetryUsage({ feature: usage });
        }
        return getStrategy()[contextName][methodName](...args);
    });
}
export function bufferContextCalls(preStartContextManager, name, bufferApiCalls) {
    preStartContextManager.changeObservable.subscribe(() => {
        const context = preStartContextManager.getContext();
        bufferApiCalls.add((startResult) => startResult[name].setContext(context));
    });
}
//# sourceMappingURL=defineContextMethod.js.map