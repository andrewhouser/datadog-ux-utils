import { storeContextManager } from '../context/storeContextManager';
import { SKIPPED } from '../../tools/abstractHooks';
import { createContextManager } from '../context/contextManager';
import { isEmptyObject } from '../../tools/utils/objectUtils';
export function startUserContext(hooks, configuration, sessionManager, productKey) {
    const userContextManager = buildUserContextManager();
    if (configuration.storeContextsAcrossPages) {
        storeContextManager(configuration, userContextManager, productKey, 1 /* CustomerDataType.User */);
    }
    hooks.register(0 /* HookNames.Assemble */, ({ eventType, startTime }) => {
        const user = userContextManager.getContext();
        const session = sessionManager.findTrackedSession(startTime);
        if (session && session.anonymousId && !user.anonymous_id && !!configuration.trackAnonymousUser) {
            user.anonymous_id = session.anonymousId;
        }
        if (isEmptyObject(user)) {
            return SKIPPED;
        }
        return {
            type: eventType,
            usr: user,
        };
    });
    hooks.register(1 /* HookNames.AssembleTelemetry */, ({ startTime }) => {
        var _a;
        return ({
            anonymous_id: (_a = sessionManager.findTrackedSession(startTime)) === null || _a === void 0 ? void 0 : _a.anonymousId,
        });
    });
    return userContextManager;
}
export function buildUserContextManager() {
    return createContextManager('user', {
        propertiesConfig: {
            id: { type: 'string' },
            name: { type: 'string' },
            email: { type: 'string' },
        },
    });
}
//# sourceMappingURL=userContext.js.map