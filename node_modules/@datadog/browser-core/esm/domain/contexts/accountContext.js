import { storeContextManager } from '../context/storeContextManager';
import { SKIPPED } from '../../tools/abstractHooks';
import { isEmptyObject } from '../../tools/utils/objectUtils';
import { createContextManager } from '../context/contextManager';
export function startAccountContext(hooks, configuration, productKey) {
    const accountContextManager = buildAccountContextManager();
    if (configuration.storeContextsAcrossPages) {
        storeContextManager(configuration, accountContextManager, productKey, 4 /* CustomerDataType.Account */);
    }
    hooks.register(0 /* HookNames.Assemble */, () => {
        const account = accountContextManager.getContext();
        if (isEmptyObject(account) || !account.id) {
            return SKIPPED;
        }
        return {
            account,
        };
    });
    return accountContextManager;
}
export function buildAccountContextManager() {
    return createContextManager('account', {
        propertiesConfig: {
            id: { type: 'string', required: true },
            name: { type: 'string' },
        },
    });
}
//# sourceMappingURL=accountContext.js.map