import { storeContextManager } from '../context/storeContextManager';
import { createContextManager } from '../context/contextManager';
export function startGlobalContext(hooks, configuration, productKey, useContextNamespace) {
    const globalContextManager = buildGlobalContextManager();
    if (configuration.storeContextsAcrossPages) {
        storeContextManager(configuration, globalContextManager, productKey, 2 /* CustomerDataType.GlobalContext */);
    }
    hooks.register(0 /* HookNames.Assemble */, () => {
        const context = globalContextManager.getContext();
        return useContextNamespace ? { context } : context;
    });
    return globalContextManager;
}
export function buildGlobalContextManager() {
    return createContextManager('global context');
}
//# sourceMappingURL=globalContext.js.map