import { BufferedObservable } from '../tools/observable';
import { trackRuntimeError } from './error/trackRuntimeError';
const BUFFER_LIMIT = 500;
export function startBufferingData(trackRuntimeErrorImpl = trackRuntimeError) {
    const observable = new BufferedObservable(BUFFER_LIMIT);
    const runtimeErrorSubscription = trackRuntimeErrorImpl().subscribe((error) => {
        observable.notify({
            type: 0 /* BufferedDataType.RUNTIME_ERROR */,
            error,
        });
    });
    return {
        observable,
        stop: () => {
            runtimeErrorSubscription.unsubscribe();
        },
    };
}
//# sourceMappingURL=bufferedData.js.map