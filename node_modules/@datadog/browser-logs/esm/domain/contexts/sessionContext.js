import { DISCARDED, SKIPPED } from '@datadog/browser-core';
export function startSessionContext(hooks, configuration, sessionManager) {
    hooks.register(0 /* HookNames.Assemble */, ({ startTime }) => {
        const session = sessionManager.findTrackedSession(startTime);
        const isSessionTracked = sessionManager.findTrackedSession(startTime, { returnInactive: true });
        if (!isSessionTracked) {
            return DISCARDED;
        }
        return {
            service: configuration.service,
            session_id: session ? session.id : undefined,
            session: session ? { id: session.id } : undefined,
        };
    });
    hooks.register(1 /* HookNames.AssembleTelemetry */, ({ startTime }) => {
        const session = sessionManager.findTrackedSession(startTime);
        if (!session || !session.id) {
            return SKIPPED;
        }
        return {
            session: { id: session.id },
        };
    });
}
//# sourceMappingURL=sessionContext.js.map