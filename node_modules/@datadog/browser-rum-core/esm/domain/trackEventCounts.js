import { noop } from '@datadog/browser-core';
import { RumEventType } from '../rawRumEvent.types';
export function trackEventCounts({ lifeCycle, isChildEvent, onChange: callback = noop, }) {
    const eventCounts = {
        errorCount: 0,
        longTaskCount: 0,
        resourceCount: 0,
        actionCount: 0,
        frustrationCount: 0,
    };
    const subscription = lifeCycle.subscribe(13 /* LifeCycleEventType.RUM_EVENT_COLLECTED */, (event) => {
        var _a;
        if (event.type === 'view' || event.type === 'vital' || !isChildEvent(event)) {
            return;
        }
        switch (event.type) {
            case RumEventType.ERROR:
                eventCounts.errorCount += 1;
                callback();
                break;
            case RumEventType.ACTION:
                eventCounts.actionCount += 1;
                if (event.action.frustration) {
                    eventCounts.frustrationCount += event.action.frustration.type.length;
                }
                callback();
                break;
            case RumEventType.LONG_TASK:
                eventCounts.longTaskCount += 1;
                callback();
                break;
            case RumEventType.RESOURCE:
                if (!((_a = event._dd) === null || _a === void 0 ? void 0 : _a.discarded)) {
                    eventCounts.resourceCount += 1;
                    callback();
                }
                break;
        }
    });
    return {
        stop: () => {
            subscription.unsubscribe();
        },
        eventCounts,
    };
}
//# sourceMappingURL=trackEventCounts.js.map