import { combine, isEmptyObject, display, createEventRateLimiter, isExperimentalFeatureEnabled, ExperimentalFeature, DISCARDED, buildTags, } from '@datadog/browser-core';
import { RumEventType } from '../rawRumEvent.types';
import { limitModification } from './limitModification';
const VIEW_MODIFIABLE_FIELD_PATHS = {
    'view.name': 'string',
    'view.url': 'string',
    'view.referrer': 'string',
};
const USER_CUSTOMIZABLE_FIELD_PATHS = {
    context: 'object',
};
const ROOT_MODIFIABLE_FIELD_PATHS = {
    service: 'string',
    version: 'string',
};
let modifiableFieldPathsByEvent;
export function startRumAssembly(configuration, lifeCycle, hooks, reportError) {
    modifiableFieldPathsByEvent = {
        [RumEventType.VIEW]: {
            'view.performance.lcp.resource_url': 'string',
            ...USER_CUSTOMIZABLE_FIELD_PATHS,
            ...VIEW_MODIFIABLE_FIELD_PATHS,
            ...ROOT_MODIFIABLE_FIELD_PATHS,
        },
        [RumEventType.ERROR]: {
            'error.message': 'string',
            'error.stack': 'string',
            'error.resource.url': 'string',
            'error.fingerprint': 'string',
            ...USER_CUSTOMIZABLE_FIELD_PATHS,
            ...VIEW_MODIFIABLE_FIELD_PATHS,
            ...ROOT_MODIFIABLE_FIELD_PATHS,
        },
        [RumEventType.RESOURCE]: {
            'resource.url': 'string',
            ...(isExperimentalFeatureEnabled(ExperimentalFeature.WRITABLE_RESOURCE_GRAPHQL)
                ? { 'resource.graphql': 'object' }
                : {}),
            ...USER_CUSTOMIZABLE_FIELD_PATHS,
            ...VIEW_MODIFIABLE_FIELD_PATHS,
            ...ROOT_MODIFIABLE_FIELD_PATHS,
        },
        [RumEventType.ACTION]: {
            'action.target.name': 'string',
            ...USER_CUSTOMIZABLE_FIELD_PATHS,
            ...VIEW_MODIFIABLE_FIELD_PATHS,
            ...ROOT_MODIFIABLE_FIELD_PATHS,
        },
        [RumEventType.LONG_TASK]: {
            'long_task.scripts[].source_url': 'string',
            'long_task.scripts[].invoker': 'string',
            ...USER_CUSTOMIZABLE_FIELD_PATHS,
            ...VIEW_MODIFIABLE_FIELD_PATHS,
            ...ROOT_MODIFIABLE_FIELD_PATHS,
        },
        [RumEventType.VITAL]: {
            ...USER_CUSTOMIZABLE_FIELD_PATHS,
            ...VIEW_MODIFIABLE_FIELD_PATHS,
            ...ROOT_MODIFIABLE_FIELD_PATHS,
        },
    };
    const eventRateLimiters = {
        [RumEventType.ERROR]: createEventRateLimiter(RumEventType.ERROR, configuration.eventRateLimiterThreshold, reportError),
        [RumEventType.ACTION]: createEventRateLimiter(RumEventType.ACTION, configuration.eventRateLimiterThreshold, reportError),
        [RumEventType.VITAL]: createEventRateLimiter(RumEventType.VITAL, configuration.eventRateLimiterThreshold, reportError),
    };
    lifeCycle.subscribe(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, ({ startTime, duration, rawRumEvent, domainContext }) => {
        const defaultRumEventAttributes = hooks.triggerHook(0 /* HookNames.Assemble */, {
            eventType: rawRumEvent.type,
            startTime,
            duration,
        });
        if (defaultRumEventAttributes === DISCARDED) {
            return;
        }
        const serverRumEvent = combine(defaultRumEventAttributes, rawRumEvent, {
            ddtags: buildTags(configuration).join(','),
        });
        if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, eventRateLimiters)) {
            if (isEmptyObject(serverRumEvent.context)) {
                delete serverRumEvent.context;
            }
            lifeCycle.notify(13 /* LifeCycleEventType.RUM_EVENT_COLLECTED */, serverRumEvent);
        }
    });
}
function shouldSend(event, beforeSend, domainContext, eventRateLimiters) {
    var _a;
    if (beforeSend) {
        const result = limitModification(event, modifiableFieldPathsByEvent[event.type], (event) => beforeSend(event, domainContext));
        if (result === false && event.type !== RumEventType.VIEW) {
            return false;
        }
        if (result === false) {
            display.warn("Can't dismiss view events using beforeSend!");
        }
    }
    const rateLimitReached = (_a = eventRateLimiters[event.type]) === null || _a === void 0 ? void 0 : _a.isLimitReached();
    return !rateLimitReached;
}
//# sourceMappingURL=assembly.js.map