import { RequestType, initFetchObservable, initXhrObservable, readBytesFromStream, elapsed, timeStampNow, tryToClone, } from '@datadog/browser-core';
import { isAllowedRequestUrl } from './resource/resourceUtils';
import { startTracer } from './tracing/tracer';
let nextRequestIndex = 1;
export function startRequestCollection(lifeCycle, configuration, sessionManager, userContext, accountContext) {
    const tracer = startTracer(configuration, sessionManager, userContext, accountContext);
    trackXhr(lifeCycle, configuration, tracer);
    trackFetch(lifeCycle, tracer);
}
export function trackXhr(lifeCycle, configuration, tracer) {
    const subscription = initXhrObservable(configuration).subscribe((rawContext) => {
        const context = rawContext;
        if (!isAllowedRequestUrl(context.url)) {
            return;
        }
        switch (context.state) {
            case 'start':
                tracer.traceXhr(context, context.xhr);
                context.requestIndex = getNextRequestIndex();
                lifeCycle.notify(7 /* LifeCycleEventType.REQUEST_STARTED */, {
                    requestIndex: context.requestIndex,
                    url: context.url,
                });
                break;
            case 'complete':
                tracer.clearTracingIfNeeded(context);
                lifeCycle.notify(8 /* LifeCycleEventType.REQUEST_COMPLETED */, {
                    duration: context.duration,
                    method: context.method,
                    requestIndex: context.requestIndex,
                    spanId: context.spanId,
                    startClocks: context.startClocks,
                    status: context.status,
                    traceId: context.traceId,
                    traceSampled: context.traceSampled,
                    type: RequestType.XHR,
                    url: context.url,
                    xhr: context.xhr,
                    isAborted: context.isAborted,
                    handlingStack: context.handlingStack,
                });
                break;
        }
    });
    return { stop: () => subscription.unsubscribe() };
}
export function trackFetch(lifeCycle, tracer) {
    const subscription = initFetchObservable().subscribe((rawContext) => {
        const context = rawContext;
        if (!isAllowedRequestUrl(context.url)) {
            return;
        }
        switch (context.state) {
            case 'start':
                tracer.traceFetch(context);
                context.requestIndex = getNextRequestIndex();
                lifeCycle.notify(7 /* LifeCycleEventType.REQUEST_STARTED */, {
                    requestIndex: context.requestIndex,
                    url: context.url,
                });
                break;
            case 'resolve':
                waitForResponseToComplete(context, (duration) => {
                    tracer.clearTracingIfNeeded(context);
                    lifeCycle.notify(8 /* LifeCycleEventType.REQUEST_COMPLETED */, {
                        duration,
                        method: context.method,
                        requestIndex: context.requestIndex,
                        responseType: context.responseType,
                        spanId: context.spanId,
                        startClocks: context.startClocks,
                        status: context.status,
                        traceId: context.traceId,
                        traceSampled: context.traceSampled,
                        type: RequestType.FETCH,
                        url: context.url,
                        response: context.response,
                        init: context.init,
                        input: context.input,
                        isAborted: context.isAborted,
                        handlingStack: context.handlingStack,
                    });
                });
                break;
        }
    });
    return { stop: () => subscription.unsubscribe() };
}
function getNextRequestIndex() {
    const result = nextRequestIndex;
    nextRequestIndex += 1;
    return result;
}
function waitForResponseToComplete(context, callback) {
    const clonedResponse = context.response && tryToClone(context.response);
    if (!clonedResponse || !clonedResponse.body) {
        // do not try to wait for the response if the clone failed, fetch error or null body
        callback(elapsed(context.startClocks.timeStamp, timeStampNow()));
    }
    else {
        readBytesFromStream(clonedResponse.body, () => {
            callback(elapsed(context.startClocks.timeStamp, timeStampNow()));
        }, {
            bytesLimit: Number.POSITIVE_INFINITY,
            collectStreamBody: false,
        });
    }
}
//# sourceMappingURL=requestCollection.js.map