import { getTimeZone, DISCARDED, isEmptyObject, mapValues, toServerDuration } from '@datadog/browser-core';
import { discardNegativeDuration } from '../discardNegativeDuration';
import { RumEventType } from '../../rawRumEvent.types';
import { trackViews } from './trackViews';
export function startViewCollection(lifeCycle, hooks, configuration, location, domMutationObservable, pageOpenObservable, locationChangeObservable, recorderApi, viewHistory, initialViewOptions) {
    lifeCycle.subscribe(4 /* LifeCycleEventType.VIEW_UPDATED */, (view) => lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, processViewUpdate(view, configuration, recorderApi)));
    hooks.register(0 /* HookNames.Assemble */, ({ startTime, eventType }) => {
        const view = viewHistory.findView(startTime);
        if (!view) {
            return DISCARDED;
        }
        return {
            type: eventType,
            service: view.service,
            version: view.version,
            context: view.context,
            view: {
                id: view.id,
                name: view.name,
            },
        };
    });
    hooks.register(1 /* HookNames.AssembleTelemetry */, ({ startTime }) => {
        var _a;
        return ({
            view: {
                id: (_a = viewHistory.findView(startTime)) === null || _a === void 0 ? void 0 : _a.id,
            },
        });
    });
    return trackViews(location, lifeCycle, domMutationObservable, pageOpenObservable, configuration, locationChangeObservable, !configuration.trackViewsManually, initialViewOptions);
}
function processViewUpdate(view, configuration, recorderApi) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
    const replayStats = recorderApi.getReplayStats(view.id);
    const clsDevicePixelRatio = (_b = (_a = view.commonViewMetrics) === null || _a === void 0 ? void 0 : _a.cumulativeLayoutShift) === null || _b === void 0 ? void 0 : _b.devicePixelRatio;
    const viewEvent = {
        _dd: {
            document_version: view.documentVersion,
            replay_stats: replayStats,
            cls: clsDevicePixelRatio
                ? {
                    device_pixel_ratio: clsDevicePixelRatio,
                }
                : undefined,
            configuration: {
                start_session_replay_recording_manually: configuration.startSessionReplayRecordingManually,
            },
        },
        date: view.startClocks.timeStamp,
        type: RumEventType.VIEW,
        view: {
            action: {
                count: view.eventCounts.actionCount,
            },
            frustration: {
                count: view.eventCounts.frustrationCount,
            },
            cumulative_layout_shift: (_c = view.commonViewMetrics.cumulativeLayoutShift) === null || _c === void 0 ? void 0 : _c.value,
            cumulative_layout_shift_time: toServerDuration((_d = view.commonViewMetrics.cumulativeLayoutShift) === null || _d === void 0 ? void 0 : _d.time),
            cumulative_layout_shift_target_selector: (_e = view.commonViewMetrics.cumulativeLayoutShift) === null || _e === void 0 ? void 0 : _e.targetSelector,
            first_byte: toServerDuration((_f = view.initialViewMetrics.navigationTimings) === null || _f === void 0 ? void 0 : _f.firstByte),
            dom_complete: toServerDuration((_g = view.initialViewMetrics.navigationTimings) === null || _g === void 0 ? void 0 : _g.domComplete),
            dom_content_loaded: toServerDuration((_h = view.initialViewMetrics.navigationTimings) === null || _h === void 0 ? void 0 : _h.domContentLoaded),
            dom_interactive: toServerDuration((_j = view.initialViewMetrics.navigationTimings) === null || _j === void 0 ? void 0 : _j.domInteractive),
            error: {
                count: view.eventCounts.errorCount,
            },
            first_contentful_paint: toServerDuration(view.initialViewMetrics.firstContentfulPaint),
            first_input_delay: toServerDuration((_k = view.initialViewMetrics.firstInput) === null || _k === void 0 ? void 0 : _k.delay),
            first_input_time: toServerDuration((_l = view.initialViewMetrics.firstInput) === null || _l === void 0 ? void 0 : _l.time),
            first_input_target_selector: (_m = view.initialViewMetrics.firstInput) === null || _m === void 0 ? void 0 : _m.targetSelector,
            interaction_to_next_paint: toServerDuration((_o = view.commonViewMetrics.interactionToNextPaint) === null || _o === void 0 ? void 0 : _o.value),
            interaction_to_next_paint_time: toServerDuration((_p = view.commonViewMetrics.interactionToNextPaint) === null || _p === void 0 ? void 0 : _p.time),
            interaction_to_next_paint_target_selector: (_q = view.commonViewMetrics.interactionToNextPaint) === null || _q === void 0 ? void 0 : _q.targetSelector,
            is_active: view.isActive,
            name: view.name,
            largest_contentful_paint: toServerDuration((_r = view.initialViewMetrics.largestContentfulPaint) === null || _r === void 0 ? void 0 : _r.value),
            largest_contentful_paint_target_selector: (_s = view.initialViewMetrics.largestContentfulPaint) === null || _s === void 0 ? void 0 : _s.targetSelector,
            load_event: toServerDuration((_t = view.initialViewMetrics.navigationTimings) === null || _t === void 0 ? void 0 : _t.loadEvent),
            loading_time: discardNegativeDuration(toServerDuration(view.commonViewMetrics.loadingTime)),
            loading_type: view.loadingType,
            long_task: {
                count: view.eventCounts.longTaskCount,
            },
            performance: computeViewPerformanceData(view.commonViewMetrics, view.initialViewMetrics),
            resource: {
                count: view.eventCounts.resourceCount,
            },
            time_spent: toServerDuration(view.duration),
        },
        display: view.commonViewMetrics.scroll
            ? {
                scroll: {
                    max_depth: view.commonViewMetrics.scroll.maxDepth,
                    max_depth_scroll_top: view.commonViewMetrics.scroll.maxDepthScrollTop,
                    max_scroll_height: view.commonViewMetrics.scroll.maxScrollHeight,
                    max_scroll_height_time: toServerDuration(view.commonViewMetrics.scroll.maxScrollHeightTime),
                },
            }
            : undefined,
        privacy: {
            replay_level: configuration.defaultPrivacyLevel,
        },
        device: {
            locale: navigator.language,
            locales: navigator.languages,
            time_zone: getTimeZone(),
        },
    };
    if (!isEmptyObject(view.customTimings)) {
        viewEvent.view.custom_timings = mapValues(view.customTimings, toServerDuration);
    }
    return {
        rawRumEvent: viewEvent,
        startTime: view.startClocks.relative,
        duration: view.duration,
        domainContext: {
            location: view.location,
        },
    };
}
function computeViewPerformanceData({ cumulativeLayoutShift, interactionToNextPaint }, { firstContentfulPaint, firstInput, largestContentfulPaint }) {
    return {
        cls: cumulativeLayoutShift && {
            score: cumulativeLayoutShift.value,
            timestamp: toServerDuration(cumulativeLayoutShift.time),
            target_selector: cumulativeLayoutShift.targetSelector,
            previous_rect: cumulativeLayoutShift.previousRect,
            current_rect: cumulativeLayoutShift.currentRect,
        },
        fcp: firstContentfulPaint && { timestamp: toServerDuration(firstContentfulPaint) },
        fid: firstInput && {
            duration: toServerDuration(firstInput.delay),
            timestamp: toServerDuration(firstInput.time),
            target_selector: firstInput.targetSelector,
        },
        inp: interactionToNextPaint && {
            duration: toServerDuration(interactionToNextPaint.value),
            timestamp: toServerDuration(interactionToNextPaint.time),
            target_selector: interactionToNextPaint.targetSelector,
        },
        lcp: largestContentfulPaint && {
            timestamp: toServerDuration(largestContentfulPaint.value),
            target_selector: largestContentfulPaint.targetSelector,
            resource_url: largestContentfulPaint.resourceUrl,
        },
    };
}
//# sourceMappingURL=viewCollection.js.map