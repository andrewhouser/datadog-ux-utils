import { toServerDuration, relativeToClocks, generateUUID } from '@datadog/browser-core';
import { RumEventType, RumLongTaskEntryType } from '../../rawRumEvent.types';
import { createPerformanceObservable, RumPerformanceEntryType } from '../../browser/performanceObservable';
export function startLongTaskCollection(lifeCycle, configuration) {
    const performanceLongTaskSubscription = createPerformanceObservable(configuration, {
        type: RumPerformanceEntryType.LONG_TASK,
        buffered: true,
    }).subscribe((entries) => {
        for (const entry of entries) {
            if (entry.entryType !== RumPerformanceEntryType.LONG_TASK) {
                break;
            }
            if (!configuration.trackLongTasks) {
                break;
            }
            const startClocks = relativeToClocks(entry.startTime);
            const rawRumEvent = {
                date: startClocks.timeStamp,
                long_task: {
                    id: generateUUID(),
                    entry_type: RumLongTaskEntryType.LONG_TASK,
                    duration: toServerDuration(entry.duration),
                },
                type: RumEventType.LONG_TASK,
                _dd: {
                    discarded: false,
                },
            };
            lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, {
                rawRumEvent,
                startTime: startClocks.relative,
                duration: entry.duration,
                domainContext: { performanceEntry: entry },
            });
        }
    });
    return {
        stop() {
            performanceLongTaskSubscription.unsubscribe();
        },
    };
}
//# sourceMappingURL=longTaskCollection.js.map