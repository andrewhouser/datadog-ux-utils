import type { Observable, RawError, DeflateEncoderStreamId, Encoder, TrackingConsentState, BufferedData, BufferedObservable } from '@datadog/browser-core';
import type { RumMutationRecord } from '../browser/domMutationObservable';
import { LifeCycle } from '../domain/lifeCycle';
import type { RumConfiguration } from '../domain/configuration';
import type { ViewOptions } from '../domain/view/trackViews';
import type { PageStateHistory } from '../domain/contexts/pageStateHistory';
import type { CustomVitalsState } from '../domain/vital/vitalCollection';
import type { Hooks } from '../domain/hooks';
import type { RecorderApi, ProfilerApi } from './rumPublicApi';
export type StartRum = typeof startRum;
export type StartRumResult = ReturnType<StartRum>;
export declare function startRum(configuration: RumConfiguration, recorderApi: RecorderApi, profilerApi: ProfilerApi, initialViewOptions: ViewOptions | undefined, createEncoder: (streamId: DeflateEncoderStreamId) => Encoder, trackingConsentState: TrackingConsentState, customVitalsState: CustomVitalsState, bufferedDataObservable: BufferedObservable<BufferedData>, sdkName: 'rum' | 'rum-slim' | 'rum-synthetics' | undefined): {
    addAction: (action: import("../domain/action/actionCollection").CustomAction) => void;
    addEvent: (startTime: import("@datadog/browser-core").RelativeTime, event: import("../domain/event/eventCollection").AllowedRawRumEvent, domainContext: import("..").RumEventDomainContext, duration?: import("@datadog/browser-core").Duration) => void;
    addError: ({ error, handlingStack, componentStack, startClocks, context }: import("../domain/error/errorCollection").ProvidedError) => void;
    addTiming: (name: string, time?: import("@datadog/browser-core").RelativeTime | import("@datadog/browser-core").TimeStamp) => void;
    addFeatureFlagEvaluation: (key: string, value: import("@datadog/browser-core").ContextValue) => void;
    startView: (options?: ViewOptions, startClocks?: import("@datadog/browser-core").ClocksState) => void;
    setViewContext: (context: import("@datadog/browser-core").Context) => void;
    setViewContextProperty: (key: string, value: import("@datadog/browser-core").ContextValue) => void;
    getViewContext: () => import("@datadog/browser-core").Context;
    setViewName: (name: string) => void;
    lifeCycle: import("@datadog/browser-core").AbstractLifeCycle<import("../domain/lifeCycle").LifeCycleEventMap>;
    viewHistory: import("../domain/contexts/viewHistory").ViewHistory;
    session: import("../domain/rumSessionManager").RumSessionManager;
    stopSession: () => void;
    getInternalContext: (startTime?: number) => import("@datadog/browser-core").RumInternalContext | undefined;
    startDurationVital: (name: string, options?: import("../domain/vital/vitalCollection").DurationVitalOptions) => import("../domain/vital/vitalCollection").DurationVitalReference;
    stopDurationVital: (nameOrRef: string | import("../domain/vital/vitalCollection").DurationVitalReference, options?: import("../domain/vital/vitalCollection").DurationVitalOptions) => void;
    addDurationVital: (vital: import("../domain/vital/vitalCollection").DurationVital) => void;
    globalContext: {
        getContext: () => import("@datadog/browser-core").Context;
        setContext: (newContext: unknown) => void;
        setContextProperty: (key: string, property: any) => void;
        removeContextProperty: (key: string) => void;
        clearContext: () => void;
        changeObservable: import("@datadog/browser-core").Observable<void>;
    };
    userContext: {
        getContext: () => import("@datadog/browser-core").Context;
        setContext: (newContext: unknown) => void;
        setContextProperty: (key: string, property: any) => void;
        removeContextProperty: (key: string) => void;
        clearContext: () => void;
        changeObservable: import("@datadog/browser-core").Observable<void>;
    };
    accountContext: {
        getContext: () => import("@datadog/browser-core").Context;
        setContext: (newContext: unknown) => void;
        setContextProperty: (key: string, property: any) => void;
        removeContextProperty: (key: string) => void;
        clearContext: () => void;
        changeObservable: import("@datadog/browser-core").Observable<void>;
    };
    telemetry: import("@datadog/browser-core").Telemetry;
    stop: () => void;
    hooks: {
        register<K extends import("@datadog/browser-core").HookNames>(hookName: K, callback: import("../domain/hooks").HookCallbackMap[K]): {
            unregister: () => void;
        };
        triggerHook<K extends import("@datadog/browser-core").HookNames>(hookName: K, param: Parameters<import("../domain/hooks").HookCallbackMap[K]>[0]): "DISCARDED" | Exclude<ReturnType<import("../domain/hooks").HookCallbackMap[K]>, "SKIPPED"> | undefined;
    };
};
export declare function startRumEventCollection(lifeCycle: LifeCycle, hooks: Hooks, configuration: RumConfiguration, pageStateHistory: PageStateHistory, domMutationObservable: Observable<RumMutationRecord[]>, windowOpenObservable: Observable<void>, reportError: (error: RawError) => void): {
    pageStateHistory: PageStateHistory;
    addAction: (action: import("../domain/action/actionCollection").CustomAction) => void;
    addEvent: (startTime: import("@datadog/browser-core").RelativeTime, event: import("../domain/event/eventCollection").AllowedRawRumEvent, domainContext: import("..").RumEventDomainContext, duration?: import("@datadog/browser-core").Duration) => void;
    actionContexts: import("../domain/action/trackClickActions").ActionContexts;
    stop: () => void;
};
