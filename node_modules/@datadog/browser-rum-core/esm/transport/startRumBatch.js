import { combine, startBatchWithReplica } from '@datadog/browser-core';
import { RumEventType } from '../rawRumEvent.types';
export function startRumBatch(configuration, lifeCycle, reportError, pageMayExitObservable, sessionExpireObservable, createEncoder) {
    const replica = configuration.replica;
    const batch = startBatchWithReplica(configuration, {
        endpoint: configuration.rumEndpointBuilder,
        encoder: createEncoder(2 /* DeflateEncoderStreamId.RUM */),
    }, replica && {
        endpoint: replica.rumEndpointBuilder,
        transformMessage: (message) => combine(message, { application: { id: replica.applicationId } }),
        encoder: createEncoder(3 /* DeflateEncoderStreamId.RUM_REPLICA */),
    }, reportError, pageMayExitObservable, sessionExpireObservable);
    lifeCycle.subscribe(13 /* LifeCycleEventType.RUM_EVENT_COLLECTED */, (serverRumEvent) => {
        if (serverRumEvent.type === RumEventType.VIEW) {
            batch.upsert(serverRumEvent, serverRumEvent.view.id);
        }
        else {
            batch.add(serverRumEvent);
        }
    });
    return batch;
}
//# sourceMappingURL=startRumBatch.js.map