"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRumPublicApi = makeRumPublicApi;
const browser_core_1 = require("@datadog/browser-core");
const rawRumEvent_types_1 = require("../rawRumEvent.types");
const vitalCollection_1 = require("../domain/vital/vitalCollection");
const plugins_1 = require("../domain/plugins");
const preStartRum_1 = require("./preStartRum");
function makeRumPublicApi(startRumImpl, recorderApi, profilerApi, options = {}) {
    const trackingConsentState = (0, browser_core_1.createTrackingConsentState)();
    const customVitalsState = (0, vitalCollection_1.createCustomVitalsState)();
    const bufferedDataObservable = (0, browser_core_1.startBufferingData)().observable;
    let strategy = (0, preStartRum_1.createPreStartStrategy)(options, trackingConsentState, customVitalsState, (configuration, deflateWorker, initialViewOptions) => {
        const startRumResult = startRumImpl(configuration, recorderApi, profilerApi, initialViewOptions, deflateWorker && options.createDeflateEncoder
            ? (streamId) => options.createDeflateEncoder(configuration, deflateWorker, streamId)
            : browser_core_1.createIdentityEncoder, trackingConsentState, customVitalsState, bufferedDataObservable, options.sdkName);
        recorderApi.onRumStart(startRumResult.lifeCycle, configuration, startRumResult.session, startRumResult.viewHistory, deflateWorker, startRumResult.telemetry);
        profilerApi.onRumStart(startRumResult.lifeCycle, startRumResult.hooks, configuration, startRumResult.session, startRumResult.viewHistory);
        strategy = createPostStartStrategy(strategy, startRumResult);
        (0, plugins_1.callPluginsMethod)(configuration.plugins, 'onRumStart', {
            strategy, // TODO: remove this in the next major release
            addEvent: startRumResult.addEvent,
        });
        return startRumResult;
    });
    const getStrategy = () => strategy;
    const startView = (0, browser_core_1.monitor)((options) => {
        const sanitizedOptions = typeof options === 'object' ? options : { name: options };
        strategy.startView(sanitizedOptions);
        (0, browser_core_1.addTelemetryUsage)({ feature: 'start-view' });
    });
    const rumPublicApi = (0, browser_core_1.makePublicApi)({
        init: (0, browser_core_1.monitor)((initConfiguration) => {
            strategy.init(initConfiguration, rumPublicApi);
        }),
        setTrackingConsent: (0, browser_core_1.monitor)((trackingConsent) => {
            trackingConsentState.update(trackingConsent);
            (0, browser_core_1.addTelemetryUsage)({ feature: 'set-tracking-consent', tracking_consent: trackingConsent });
        }),
        setViewName: (0, browser_core_1.monitor)((name) => {
            strategy.setViewName(name);
            (0, browser_core_1.addTelemetryUsage)({ feature: 'set-view-name' });
        }),
        setViewContext: (0, browser_core_1.monitor)((context) => {
            strategy.setViewContext(context);
            (0, browser_core_1.addTelemetryUsage)({ feature: 'set-view-context' });
        }),
        setViewContextProperty: (0, browser_core_1.monitor)((key, value) => {
            strategy.setViewContextProperty(key, value);
            (0, browser_core_1.addTelemetryUsage)({ feature: 'set-view-context-property' });
        }),
        getViewContext: (0, browser_core_1.monitor)(() => {
            (0, browser_core_1.addTelemetryUsage)({ feature: 'set-view-context-property' });
            return strategy.getViewContext();
        }),
        getInternalContext: (0, browser_core_1.monitor)((startTime) => strategy.getInternalContext(startTime)),
        getInitConfiguration: (0, browser_core_1.monitor)(() => (0, browser_core_1.deepClone)(strategy.initConfiguration)),
        addAction: (name, context) => {
            const handlingStack = (0, browser_core_1.createHandlingStack)('action');
            (0, browser_core_1.callMonitored)(() => {
                strategy.addAction({
                    name: (0, browser_core_1.sanitize)(name),
                    context: (0, browser_core_1.sanitize)(context),
                    startClocks: (0, browser_core_1.clocksNow)(),
                    type: rawRumEvent_types_1.ActionType.CUSTOM,
                    handlingStack,
                });
                (0, browser_core_1.addTelemetryUsage)({ feature: 'add-action' });
            });
        },
        addError: (error, context) => {
            const handlingStack = (0, browser_core_1.createHandlingStack)('error');
            (0, browser_core_1.callMonitored)(() => {
                strategy.addError({
                    error, // Do not sanitize error here, it is needed unserialized by computeRawError()
                    handlingStack,
                    context: (0, browser_core_1.sanitize)(context),
                    startClocks: (0, browser_core_1.clocksNow)(),
                });
                (0, browser_core_1.addTelemetryUsage)({ feature: 'add-error' });
            });
        },
        addTiming: (0, browser_core_1.monitor)((name, time) => {
            // TODO: next major decide to drop relative time support or update its behaviour
            strategy.addTiming((0, browser_core_1.sanitize)(name), time);
        }),
        setGlobalContext: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.globalContext, browser_core_1.ContextManagerMethod.setContext, 'set-global-context'),
        getGlobalContext: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.globalContext, browser_core_1.ContextManagerMethod.getContext, 'get-global-context'),
        setGlobalContextProperty: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.globalContext, browser_core_1.ContextManagerMethod.setContextProperty, 'set-global-context-property'),
        removeGlobalContextProperty: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.globalContext, browser_core_1.ContextManagerMethod.removeContextProperty, 'remove-global-context-property'),
        clearGlobalContext: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.globalContext, browser_core_1.ContextManagerMethod.clearContext, 'clear-global-context'),
        setUser: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.userContext, browser_core_1.ContextManagerMethod.setContext, 'set-user'),
        getUser: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.userContext, browser_core_1.ContextManagerMethod.getContext, 'get-user'),
        setUserProperty: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.userContext, browser_core_1.ContextManagerMethod.setContextProperty, 'set-user-property'),
        removeUserProperty: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.userContext, browser_core_1.ContextManagerMethod.removeContextProperty, 'remove-user-property'),
        clearUser: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.userContext, browser_core_1.ContextManagerMethod.clearContext, 'clear-user'),
        setAccount: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.accountContext, browser_core_1.ContextManagerMethod.setContext, 'set-account'),
        getAccount: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.accountContext, browser_core_1.ContextManagerMethod.getContext, 'get-account'),
        setAccountProperty: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.accountContext, browser_core_1.ContextManagerMethod.setContextProperty, 'set-account-property'),
        removeAccountProperty: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.accountContext, browser_core_1.ContextManagerMethod.removeContextProperty, 'remove-account-property'),
        clearAccount: (0, browser_core_1.defineContextMethod)(getStrategy, browser_core_1.CustomerContextKey.accountContext, browser_core_1.ContextManagerMethod.clearContext, 'clear-account'),
        startView,
        stopSession: (0, browser_core_1.monitor)(() => {
            strategy.stopSession();
            (0, browser_core_1.addTelemetryUsage)({ feature: 'stop-session' });
        }),
        addFeatureFlagEvaluation: (0, browser_core_1.monitor)((key, value) => {
            strategy.addFeatureFlagEvaluation((0, browser_core_1.sanitize)(key), (0, browser_core_1.sanitize)(value));
            (0, browser_core_1.addTelemetryUsage)({ feature: 'add-feature-flag-evaluation' });
        }),
        getSessionReplayLink: (0, browser_core_1.monitor)(() => recorderApi.getSessionReplayLink()),
        startSessionReplayRecording: (0, browser_core_1.monitor)((options) => {
            recorderApi.start(options);
            (0, browser_core_1.addTelemetryUsage)({ feature: 'start-session-replay-recording', force: options && options.force });
        }),
        stopSessionReplayRecording: (0, browser_core_1.monitor)(() => recorderApi.stop()),
        addDurationVital: (0, browser_core_1.monitor)((name, options) => {
            (0, browser_core_1.addTelemetryUsage)({ feature: 'add-duration-vital' });
            strategy.addDurationVital({
                name: (0, browser_core_1.sanitize)(name),
                type: rawRumEvent_types_1.VitalType.DURATION,
                startClocks: (0, browser_core_1.timeStampToClocks)(options.startTime),
                duration: options.duration,
                context: (0, browser_core_1.sanitize)(options && options.context),
                description: (0, browser_core_1.sanitize)(options && options.description),
            });
        }),
        startDurationVital: (0, browser_core_1.monitor)((name, options) => {
            (0, browser_core_1.addTelemetryUsage)({ feature: 'start-duration-vital' });
            return strategy.startDurationVital((0, browser_core_1.sanitize)(name), {
                context: (0, browser_core_1.sanitize)(options && options.context),
                description: (0, browser_core_1.sanitize)(options && options.description),
            });
        }),
        stopDurationVital: (0, browser_core_1.monitor)((nameOrRef, options) => {
            (0, browser_core_1.addTelemetryUsage)({ feature: 'stop-duration-vital' });
            strategy.stopDurationVital(typeof nameOrRef === 'string' ? (0, browser_core_1.sanitize)(nameOrRef) : nameOrRef, {
                context: (0, browser_core_1.sanitize)(options && options.context),
                description: (0, browser_core_1.sanitize)(options && options.description),
            });
        }),
    });
    return rumPublicApi;
}
function createPostStartStrategy(preStartStrategy, startRumResult) {
    return {
        init: (initConfiguration) => {
            (0, browser_core_1.displayAlreadyInitializedError)('DD_RUM', initConfiguration);
        },
        initConfiguration: preStartStrategy.initConfiguration,
        ...startRumResult,
    };
}
//# sourceMappingURL=rumPublicApi.js.map