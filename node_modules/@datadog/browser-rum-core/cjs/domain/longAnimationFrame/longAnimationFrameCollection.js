"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startLongAnimationFrameCollection = startLongAnimationFrameCollection;
const browser_core_1 = require("@datadog/browser-core");
const rawRumEvent_types_1 = require("../../rawRumEvent.types");
const performanceObservable_1 = require("../../browser/performanceObservable");
function startLongAnimationFrameCollection(lifeCycle, configuration) {
    const performanceResourceSubscription = (0, performanceObservable_1.createPerformanceObservable)(configuration, {
        type: performanceObservable_1.RumPerformanceEntryType.LONG_ANIMATION_FRAME,
        buffered: true,
    }).subscribe((entries) => {
        for (const entry of entries) {
            const startClocks = (0, browser_core_1.relativeToClocks)(entry.startTime);
            const rawRumEvent = {
                date: startClocks.timeStamp,
                long_task: {
                    id: (0, browser_core_1.generateUUID)(),
                    entry_type: rawRumEvent_types_1.RumLongTaskEntryType.LONG_ANIMATION_FRAME,
                    duration: (0, browser_core_1.toServerDuration)(entry.duration),
                    blocking_duration: (0, browser_core_1.toServerDuration)(entry.blockingDuration),
                    first_ui_event_timestamp: (0, browser_core_1.toServerDuration)(entry.firstUIEventTimestamp),
                    render_start: (0, browser_core_1.toServerDuration)(entry.renderStart),
                    style_and_layout_start: (0, browser_core_1.toServerDuration)(entry.styleAndLayoutStart),
                    start_time: (0, browser_core_1.toServerDuration)(entry.startTime),
                    scripts: entry.scripts.map((script) => ({
                        duration: (0, browser_core_1.toServerDuration)(script.duration),
                        pause_duration: (0, browser_core_1.toServerDuration)(script.pauseDuration),
                        forced_style_and_layout_duration: (0, browser_core_1.toServerDuration)(script.forcedStyleAndLayoutDuration),
                        start_time: (0, browser_core_1.toServerDuration)(script.startTime),
                        execution_start: (0, browser_core_1.toServerDuration)(script.executionStart),
                        source_url: script.sourceURL,
                        source_function_name: script.sourceFunctionName,
                        source_char_position: script.sourceCharPosition,
                        invoker: script.invoker,
                        invoker_type: script.invokerType,
                        window_attribution: script.windowAttribution,
                    })),
                },
                type: rawRumEvent_types_1.RumEventType.LONG_TASK,
                _dd: {
                    discarded: false,
                },
            };
            lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, {
                rawRumEvent,
                startTime: startClocks.relative,
                duration: entry.duration,
                domainContext: { performanceEntry: entry },
            });
        }
    });
    return { stop: () => performanceResourceSubscription.unsubscribe() };
}
//# sourceMappingURL=longAnimationFrameCollection.js.map