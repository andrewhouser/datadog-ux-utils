"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startResourceCollection = startResourceCollection;
const browser_core_1 = require("@datadog/browser-core");
const performanceObservable_1 = require("../../browser/performanceObservable");
const rawRumEvent_types_1 = require("../../rawRumEvent.types");
const identifier_1 = require("../tracing/identifier");
const matchRequestResourceEntry_1 = require("./matchRequestResourceEntry");
const resourceUtils_1 = require("./resourceUtils");
const retrieveInitialDocumentResourceTiming_1 = require("./retrieveInitialDocumentResourceTiming");
function startResourceCollection(lifeCycle, configuration, pageStateHistory, taskQueue = (0, browser_core_1.createTaskQueue)(), retrieveInitialDocumentResourceTimingImpl = retrieveInitialDocumentResourceTiming_1.retrieveInitialDocumentResourceTiming) {
    lifeCycle.subscribe(8 /* LifeCycleEventType.REQUEST_COMPLETED */, (request) => {
        handleResource(() => processRequest(request, configuration, pageStateHistory));
    });
    const performanceResourceSubscription = (0, performanceObservable_1.createPerformanceObservable)(configuration, {
        type: performanceObservable_1.RumPerformanceEntryType.RESOURCE,
        buffered: true,
    }).subscribe((entries) => {
        for (const entry of entries) {
            if (!(0, resourceUtils_1.isResourceEntryRequestType)(entry)) {
                handleResource(() => processResourceEntry(entry, configuration));
            }
        }
    });
    retrieveInitialDocumentResourceTimingImpl(configuration, (timing) => {
        handleResource(() => processResourceEntry(timing, configuration));
    });
    function handleResource(computeRawEvent) {
        taskQueue.push(() => {
            const rawEvent = computeRawEvent();
            if (rawEvent) {
                lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, rawEvent);
            }
        });
    }
    return {
        stop: () => {
            performanceResourceSubscription.unsubscribe();
        },
    };
}
function processRequest(request, configuration, pageStateHistory) {
    const matchingTiming = (0, matchRequestResourceEntry_1.matchRequestResourceEntry)(request);
    const startClocks = matchingTiming ? (0, browser_core_1.relativeToClocks)(matchingTiming.startTime) : request.startClocks;
    const tracingInfo = computeRequestTracingInfo(request, configuration);
    if (!configuration.trackResources && !tracingInfo) {
        return;
    }
    const type = request.type === browser_core_1.RequestType.XHR ? browser_core_1.ResourceType.XHR : browser_core_1.ResourceType.FETCH;
    const correspondingTimingOverrides = matchingTiming ? computeResourceEntryMetrics(matchingTiming) : undefined;
    const duration = matchingTiming
        ? (0, resourceUtils_1.computeResourceEntryDuration)(matchingTiming)
        : computeRequestDuration(pageStateHistory, startClocks, request.duration);
    const resourceEvent = (0, browser_core_1.combine)({
        date: startClocks.timeStamp,
        resource: {
            id: (0, browser_core_1.generateUUID)(),
            type,
            duration: (0, browser_core_1.toServerDuration)(duration),
            method: request.method,
            status_code: request.status,
            protocol: matchingTiming && (0, resourceUtils_1.computeResourceEntryProtocol)(matchingTiming),
            url: (0, resourceUtils_1.sanitizeIfLongDataUrl)(request.url),
            delivery_type: matchingTiming && (0, resourceUtils_1.computeResourceEntryDeliveryType)(matchingTiming),
        },
        type: rawRumEvent_types_1.RumEventType.RESOURCE,
        _dd: {
            discarded: !configuration.trackResources,
        },
    }, tracingInfo, correspondingTimingOverrides);
    return {
        startTime: startClocks.relative,
        duration,
        rawRumEvent: resourceEvent,
        domainContext: {
            performanceEntry: matchingTiming,
            xhr: request.xhr,
            response: request.response,
            requestInput: request.input,
            requestInit: request.init,
            error: request.error,
            isAborted: request.isAborted,
            handlingStack: request.handlingStack,
        },
    };
}
function processResourceEntry(entry, configuration) {
    const startClocks = (0, browser_core_1.relativeToClocks)(entry.startTime);
    const tracingInfo = computeResourceEntryTracingInfo(entry, configuration);
    if (!configuration.trackResources && !tracingInfo) {
        return;
    }
    const type = (0, resourceUtils_1.computeResourceEntryType)(entry);
    const entryMetrics = computeResourceEntryMetrics(entry);
    const duration = (0, resourceUtils_1.computeResourceEntryDuration)(entry);
    const resourceEvent = (0, browser_core_1.combine)({
        date: startClocks.timeStamp,
        resource: {
            id: (0, browser_core_1.generateUUID)(),
            type,
            duration: (0, browser_core_1.toServerDuration)(duration),
            url: entry.name,
            status_code: discardZeroStatus(entry.responseStatus),
            protocol: (0, resourceUtils_1.computeResourceEntryProtocol)(entry),
            delivery_type: (0, resourceUtils_1.computeResourceEntryDeliveryType)(entry),
        },
        type: rawRumEvent_types_1.RumEventType.RESOURCE,
        _dd: {
            discarded: !configuration.trackResources,
        },
    }, tracingInfo, entryMetrics);
    return {
        startTime: startClocks.relative,
        duration,
        rawRumEvent: resourceEvent,
        domainContext: {
            performanceEntry: entry,
        },
    };
}
function computeResourceEntryMetrics(entry) {
    const { renderBlockingStatus } = entry;
    return {
        resource: {
            render_blocking_status: renderBlockingStatus,
            ...(0, resourceUtils_1.computeResourceEntrySize)(entry),
            ...(0, resourceUtils_1.computeResourceEntryDetails)(entry),
        },
    };
}
function computeRequestTracingInfo(request, configuration) {
    const hasBeenTraced = request.traceSampled && request.traceId && request.spanId;
    if (!hasBeenTraced) {
        return undefined;
    }
    return {
        _dd: {
            span_id: request.spanId.toString(),
            trace_id: request.traceId.toString(),
            rule_psr: configuration.rulePsr,
        },
    };
}
function computeResourceEntryTracingInfo(entry, configuration) {
    const hasBeenTraced = entry.traceId;
    if (!hasBeenTraced) {
        return undefined;
    }
    return {
        _dd: {
            trace_id: entry.traceId,
            span_id: (0, identifier_1.createSpanIdentifier)().toString(),
            rule_psr: configuration.rulePsr,
        },
    };
}
function computeRequestDuration(pageStateHistory, startClocks, duration) {
    return !pageStateHistory.wasInPageStateDuringPeriod("frozen" /* PageState.FROZEN */, startClocks.relative, duration)
        ? duration
        : undefined;
}
/**
 * The status is 0 for cross-origin resources without CORS headers, so the status is meaningless, and we shouldn't report it
 * https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStatus#cross-origin_response_status_codes
 */
function discardZeroStatus(statusCode) {
    return statusCode === 0 ? undefined : statusCode;
}
//# sourceMappingURL=resourceCollection.js.map