"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BYTES_COMPUTATION_THROTTLING_DELAY = exports.FEATURE_FLAG_CONTEXT_TIME_OUT_DELAY = void 0;
exports.startFeatureFlagContexts = startFeatureFlagContexts;
const browser_core_1 = require("@datadog/browser-core");
const rawRumEvent_types_1 = require("../../rawRumEvent.types");
exports.FEATURE_FLAG_CONTEXT_TIME_OUT_DELAY = browser_core_1.SESSION_TIME_OUT_DELAY;
exports.BYTES_COMPUTATION_THROTTLING_DELAY = 200;
/**
 * Start feature flag contexts
 *
 * Feature flag contexts follow the life of views.
 * A new context is added when a view is created and ended when the view is ended
 *
 * Note: we choose not to add a new context at each evaluation to save memory
 */
function startFeatureFlagContexts(lifeCycle, hooks, configuration) {
    const featureFlagContexts = (0, browser_core_1.createValueHistory)({
        expireDelay: exports.FEATURE_FLAG_CONTEXT_TIME_OUT_DELAY,
    });
    lifeCycle.subscribe(1 /* LifeCycleEventType.BEFORE_VIEW_CREATED */, ({ startClocks }) => {
        featureFlagContexts.add({}, startClocks.relative);
    });
    lifeCycle.subscribe(6 /* LifeCycleEventType.AFTER_VIEW_ENDED */, ({ endClocks }) => {
        featureFlagContexts.closeActive(endClocks.relative);
    });
    hooks.register(0 /* HookNames.Assemble */, ({ startTime, eventType }) => {
        const trackFeatureFlagsForEvents = configuration.trackFeatureFlagsForEvents.concat([
            rawRumEvent_types_1.RumEventType.VIEW,
            rawRumEvent_types_1.RumEventType.ERROR,
        ]);
        if (!trackFeatureFlagsForEvents.includes(eventType)) {
            return browser_core_1.SKIPPED;
        }
        const featureFlagContext = featureFlagContexts.find(startTime);
        if (!featureFlagContext || (0, browser_core_1.isEmptyObject)(featureFlagContext)) {
            return browser_core_1.SKIPPED;
        }
        return {
            type: eventType,
            feature_flags: featureFlagContext,
        };
    });
    return {
        addFeatureFlagEvaluation: (key, value) => {
            const currentContext = featureFlagContexts.find();
            if (currentContext) {
                currentContext[key] = value;
            }
        },
    };
}
//# sourceMappingURL=featureFlagContext.js.map