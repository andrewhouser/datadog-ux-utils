"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startDisplayContext = startDisplayContext;
const browser_core_1 = require("@datadog/browser-core");
const viewportObservable_1 = require("../../browser/viewportObservable");
function startDisplayContext(hooks, configuration) {
    let viewport;
    // Use requestAnimationFrame to delay the calculation of viewport dimensions until after SDK initialization, preventing long tasks.
    const animationFrameId = requestAnimationFrame((0, browser_core_1.monitor)(() => {
        viewport = (0, viewportObservable_1.getViewportDimension)();
    }));
    const unsubscribeViewport = (0, viewportObservable_1.initViewportObservable)(configuration).subscribe((viewportDimension) => {
        viewport = viewportDimension;
    }).unsubscribe;
    hooks.register(0 /* HookNames.Assemble */, ({ eventType }) => ({
        type: eventType,
        display: viewport ? { viewport } : undefined,
    }));
    return {
        stop: () => {
            unsubscribeViewport();
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
        },
    };
}
//# sourceMappingURL=displayContext.js.map