"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VIEW_CONTEXT_TIME_OUT_DELAY = void 0;
exports.startViewHistory = startViewHistory;
const browser_core_1 = require("@datadog/browser-core");
exports.VIEW_CONTEXT_TIME_OUT_DELAY = browser_core_1.SESSION_TIME_OUT_DELAY;
function startViewHistory(lifeCycle) {
    const viewValueHistory = (0, browser_core_1.createValueHistory)({ expireDelay: exports.VIEW_CONTEXT_TIME_OUT_DELAY });
    lifeCycle.subscribe(1 /* LifeCycleEventType.BEFORE_VIEW_CREATED */, (view) => {
        viewValueHistory.add(buildViewHistoryEntry(view), view.startClocks.relative);
    });
    lifeCycle.subscribe(6 /* LifeCycleEventType.AFTER_VIEW_ENDED */, ({ endClocks }) => {
        viewValueHistory.closeActive(endClocks.relative);
    });
    lifeCycle.subscribe(3 /* LifeCycleEventType.BEFORE_VIEW_UPDATED */, (viewUpdate) => {
        const currentView = viewValueHistory.find(viewUpdate.startClocks.relative);
        if (!currentView) {
            return;
        }
        if (viewUpdate.name) {
            currentView.name = viewUpdate.name;
        }
        if (viewUpdate.context) {
            currentView.context = viewUpdate.context;
        }
        currentView.sessionIsActive = viewUpdate.sessionIsActive;
    });
    lifeCycle.subscribe(10 /* LifeCycleEventType.SESSION_RENEWED */, () => {
        viewValueHistory.reset();
    });
    function buildViewHistoryEntry(view) {
        return {
            service: view.service,
            version: view.version,
            context: view.context,
            id: view.id,
            name: view.name,
            startClocks: view.startClocks,
        };
    }
    return {
        findView: (startTime) => viewValueHistory.find(startTime),
        stop: () => {
            viewValueHistory.stop();
        },
    };
}
//# sourceMappingURL=viewHistory.js.map