"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackFirstHidden = trackFirstHidden;
const browser_core_1 = require("@datadog/browser-core");
const performanceObservable_1 = require("../../../browser/performanceObservable");
function trackFirstHidden(configuration, viewStart, eventTarget = window) {
    if (document.visibilityState === 'hidden') {
        return { timeStamp: 0, stop: browser_core_1.noop };
    }
    if ((0, performanceObservable_1.supportPerformanceTimingEvent)(performanceObservable_1.RumPerformanceEntryType.VISIBILITY_STATE)) {
        const firstHiddenEntry = performance
            .getEntriesByType(performanceObservable_1.RumPerformanceEntryType.VISIBILITY_STATE)
            .filter((entry) => entry.name === 'hidden')
            .find((entry) => entry.startTime >= viewStart.relative);
        if (firstHiddenEntry) {
            return { timeStamp: firstHiddenEntry.startTime, stop: browser_core_1.noop };
        }
    }
    let timeStamp = Infinity;
    const { stop } = (0, browser_core_1.addEventListeners)(configuration, eventTarget, ["pagehide" /* DOM_EVENT.PAGE_HIDE */, "visibilitychange" /* DOM_EVENT.VISIBILITY_CHANGE */], (event) => {
        if (event.type === "pagehide" /* DOM_EVENT.PAGE_HIDE */ || document.visibilityState === 'hidden') {
            timeStamp = event.timeStamp;
            stop();
        }
    }, { capture: true });
    return {
        get timeStamp() {
            return timeStamp;
        },
        stop,
    };
}
//# sourceMappingURL=trackFirstHidden.js.map